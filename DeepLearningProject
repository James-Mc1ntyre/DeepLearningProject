{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Motor Imagery Deep Learning project <br>\n",
    "By: James McIntyre and John McLinden"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 228,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[]\n"
     ]
    }
   ],
   "source": [
    "# imports\n",
    "import os\n",
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "import tensorflow_probability as tfp\n",
    "from keras.callbacks import ModelCheckpoint, EarlyStopping\n",
    "from keras import layers, losses\n",
    "import mne \n",
    "mne.utils.set_config('MNE_USE_CUDA', 'true')  \n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import minmax_scale\n",
    "physical_devices = tf.config.experimental.list_physical_devices('GPU')\n",
    "print(physical_devices)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Load data\n",
    "Load saved epochs and labels from preprocessing step"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 229,
   "metadata": {},
   "outputs": [],
   "source": [
    "filepath = os.getcwd()\n",
    "\n",
    "data = np.load(filepath + '\\\\RecordedProjectData\\\\preprocessedOnlineDataset_EpochsAndLabels.npz')\n",
    "x_train = data['training_epochs']\n",
    "y_train = data['training_labels']\n",
    "x_test = data['testing_epochs']\n",
    "y_test = data['testing_labels']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Create one-hot encoding for labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 230,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Usign their one-hot encoding function\n",
    "def to_one_hot(y, by_sub=False):\n",
    "    if by_sub:\n",
    "        new_array = np.array([\"nan\" for nan in range(len(y))])\n",
    "        for index, label in enumerate(y):\n",
    "            new_array[index] = ''.join([i for i in label if not i.isdigit()])\n",
    "    else:\n",
    "        new_array = y.copy()\n",
    "    total_labels = np.unique(new_array)\n",
    "    mapping = {}\n",
    "    for x in range(len(total_labels)):\n",
    "        mapping[total_labels[x]] = x\n",
    "    for x in range(len(new_array)):\n",
    "        new_array[x] = mapping[new_array[x]]\n",
    "\n",
    "    return tf.keras.utils.to_categorical(new_array)\n",
    "        \n",
    "#Transform y to one-hot-encoding\n",
    "# enc = onehot\n",
    "y_test_valid_OH = to_one_hot(y_test)\n",
    "y_train_OH = to_one_hot(y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Reshape data then apply MinMax scaling, in the same way that the CNN was trained"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 231,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Reshape for scaling\n",
    "x_train_reshapedForScaling = x_train.reshape(x_train.shape[0], x_train.shape[1] * x_train.shape[2])\n",
    "x_test_valid_reshapedForScaling = x_test.reshape(x_test.shape[0], x_test.shape[1] * x_test.shape[2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 232,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Scale train and test separately\n",
    "x_train_scaled = minmax_scale(x_train_reshapedForScaling, axis=2)\n",
    "x_test_valid_scaled = minmax_scale(x_test_valid_reshapedForScaling, axis=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 233,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Reshape after scaling, reshape training data after SMOTE\n",
    "x_test_valid_reshaped = x_test_valid_scaled.reshape(x_test_valid_scaled.shape[0], int(x_test_valid_scaled.shape[1]/2),2).astype(np.float64)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Create Val/Test split from test dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 234,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Create Validation/test\n",
    "x_valid_reshaped, x_test_reshaped, y_valid_OH, y_test_OH = train_test_split(x_test_valid_reshaped,\n",
    "                                                    y_test_valid_OH,\n",
    "                                                    stratify=y_test_valid_OH,\n",
    "                                                    test_size=0.50,\n",
    "                                                    random_state=42)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Apply SMOTE for data augmentation<br>\n",
    "Only apply to training set <br>\n",
    "Does not apply for online dataset, only for the limited recorded dataset.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 235,
   "metadata": {},
   "outputs": [],
   "source": [
    "# # smote\n",
    "# from imblearn.over_sampling import SMOTE\n",
    "# sm = SMOTE(random_state=42)\n",
    "# x_train_smote, y_train_OH_smote = sm.fit_resample(x_train_scaled, y_train_OH)\n",
    "# print('classes count')\n",
    "# print ('before oversampling = {}'.format(y_train_OH.sum(axis=0)))\n",
    "# print ('after oversampling = {}'.format(y_train_OH_smote.sum(axis=0)))\n",
    "\n",
    "# no smote\n",
    "x_train_smote, y_train_OH_smote = x_train_scaled, y_train_OH"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Reshape training data after SMOTE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 236,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train_reshaped = x_train_smote.reshape(x_train_smote.shape[0], int(x_train_smote.shape[1]/2),2).astype(np.float64)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Train CNN architecture on new dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Set up and train a CNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 237,
   "metadata": {},
   "outputs": [],
   "source": [
    "class HopefullNet(tf.keras.Model):\n",
    "    \"\"\"\n",
    "    Original HopeFullNet\n",
    "    \"\"\"\n",
    "    def __init__(self, inp_shape = (640,2)):\n",
    "        super(HopefullNet, self).__init__()\n",
    "        self.inp_shape = inp_shape\n",
    "\n",
    "        self.kernel_size_0 = 20\n",
    "        self.kernel_size_1 = 6\n",
    "        self.drop_rate = 0.5\n",
    "\n",
    "        self.conv1 = tf.keras.layers.Conv1D(filters=32,\n",
    "                                            kernel_size=self.kernel_size_0,\n",
    "                                            activation='relu',\n",
    "                                            padding= \"same\",\n",
    "                                            input_shape=self.inp_shape)\n",
    "        self.batch_n_1 = tf.keras.layers.BatchNormalization()\n",
    "        self.conv2 = tf.keras.layers.Conv1D(filters=32,\n",
    "                                            kernel_size=self.kernel_size_0,\n",
    "                                            activation='relu',\n",
    "                                            padding= \"valid\")\n",
    "        self.batch_n_2 = tf.keras.layers.BatchNormalization()\n",
    "        self.spatial_drop_1 = tf.keras.layers.SpatialDropout1D(self.drop_rate)\n",
    "        self.conv3 = tf.keras.layers.Conv1D(filters=32,\n",
    "                                            kernel_size=self.kernel_size_1,\n",
    "                                            activation='relu',\n",
    "                                            padding= \"valid\")\n",
    "        self.avg_pool1 = tf.keras.layers.AvgPool1D(pool_size=2)\n",
    "        self.conv4 = tf.keras.layers.Conv1D(filters=32,\n",
    "                                            kernel_size=self.kernel_size_1,\n",
    "                                            activation='relu',\n",
    "                                            padding= \"valid\")\n",
    "        self.spatial_drop_2 = tf.keras.layers.SpatialDropout1D(self.drop_rate)\n",
    "        self.flat = tf.keras.layers.Flatten()\n",
    "        self.dense1 = tf.keras.layers.Dense(296, activation='relu')\n",
    "        self.dropout1 = tf.keras.layers.Dropout(self.drop_rate)\n",
    "        self.dense2 = tf.keras.layers.Dense(148, activation='relu')\n",
    "        self.dropout2 = tf.keras.layers.Dropout(self.drop_rate)\n",
    "        self.dense3 = tf.keras.layers.Dense(74, activation='relu')\n",
    "        self.dropout3 = tf.keras.layers.Dropout(self.drop_rate)\n",
    "        self.out = tf.keras.layers.Dense(4, activation='softmax')\n",
    "\n",
    "    def call(self, input_tensor):\n",
    "        conv1 = self.conv1(input_tensor)\n",
    "        batch_n_1 = self.batch_n_1(conv1)\n",
    "        conv2 = self.conv2(batch_n_1)\n",
    "        batch_n_2 = self.batch_n_2(conv2)\n",
    "        spatial_drop_1 = self.spatial_drop_1(batch_n_2)\n",
    "        conv3 = self.conv3(spatial_drop_1)\n",
    "        avg_pool1 = self.avg_pool1(conv3)\n",
    "        conv4 = self.conv4(avg_pool1)\n",
    "        spatial_drop_2 = self.spatial_drop_2(conv4)\n",
    "        flat = self.flat(spatial_drop_2)\n",
    "        dense1 = self.dense1(flat)\n",
    "        dropout1 = self.dropout1(dense1)\n",
    "        dense2 = self.dense2(dropout1)\n",
    "        dropout2 = self.dropout2(dense2)\n",
    "        return self.out(dropout2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Compile model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 238,
   "metadata": {},
   "outputs": [],
   "source": [
    "learning_rate = 1e-4\n",
    "\n",
    "loss = tf.keras.losses.categorical_crossentropy\n",
    "optimizer = tf.keras.optimizers.Adam(learning_rate=learning_rate)\n",
    "model = HopefullNet()\n",
    "\n",
    "model.compile(loss=loss, optimizer=optimizer, metrics=['accuracy'])\n",
    "\n",
    "# Where to save model\n",
    "modelPath = filepath + r'\\models\\OnlineDatasetTraainedModel.h5'\n",
    "\n",
    "# build callback list\n",
    "checkpoint = ModelCheckpoint( # set model saving checkpoints\n",
    "    modelPath, # set path to save model weights\n",
    "    monitor='val_loss', # set monitor metrics\n",
    "    verbose=1, # set training verbosity\n",
    "    save_best_only=True, # set if want to save only best weights\n",
    "    save_weights_only=True, # set if you want to save only model weights\n",
    "    mode='auto', # set if save min or max in metrics\n",
    "    save_freq='epoch' # interval between checkpoints\n",
    "    )\n",
    "\n",
    "earlystopping = EarlyStopping(\n",
    "    monitor='val_loss', # set monitor metrics\n",
    "    min_delta=0.00001, # set minimum metrics delta\n",
    "    patience=4, # number of epochs to stop training\n",
    "    restore_best_weights=True, # set if use best weights or last weights\n",
    "    )\n",
    "callbacksList = [checkpoint, earlystopping] # build callbacks list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 239,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/100\n",
      "78/78 [==============================] - ETA: 0s - loss: 1.9207 - accuracy: 0.2420\n",
      "Epoch 1: val_loss improved from inf to 1.38570, saving model to C:\\Users\\james\\OneDrive\\GradSchool\\Spring 2022\\localTraainedModel.h5\n",
      "78/78 [==============================] - 7s 77ms/step - loss: 1.9207 - accuracy: 0.2420 - val_loss: 1.3857 - val_accuracy: 0.2668\n",
      "Epoch 2/100\n",
      "78/78 [==============================] - ETA: 0s - loss: 1.5637 - accuracy: 0.2111\n",
      "Epoch 2: val_loss did not improve from 1.38570\n",
      "78/78 [==============================] - 6s 72ms/step - loss: 1.5637 - accuracy: 0.2111 - val_loss: 1.3864 - val_accuracy: 0.2789\n",
      "Epoch 3/100\n",
      "78/78 [==============================] - ETA: 0s - loss: 1.4570 - accuracy: 0.2728\n",
      "Epoch 3: val_loss did not improve from 1.38570\n",
      "78/78 [==============================] - 5s 67ms/step - loss: 1.4570 - accuracy: 0.2728 - val_loss: 1.3867 - val_accuracy: 0.2756\n",
      "Epoch 4/100\n",
      "78/78 [==============================] - ETA: 0s - loss: 1.4432 - accuracy: 0.2600\n",
      "Epoch 4: val_loss did not improve from 1.38570\n",
      "78/78 [==============================] - 5s 66ms/step - loss: 1.4432 - accuracy: 0.2600 - val_loss: 1.3866 - val_accuracy: 0.2613\n",
      "Epoch 5/100\n",
      "77/78 [============================>.] - ETA: 0s - loss: 1.4514 - accuracy: 0.2571\n",
      "Epoch 5: val_loss did not improve from 1.38570\n",
      "78/78 [==============================] - 5s 67ms/step - loss: 1.4507 - accuracy: 0.2574 - val_loss: 1.3858 - val_accuracy: 0.2789\n"
     ]
    }
   ],
   "source": [
    "hist = model.fit(x_train_reshaped, y_train_OH_smote, epochs=100, batch_size=10,\n",
    "                validation_data=(x_valid_reshaped, y_valid_OH), callbacks=callbacksList)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 240,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x18943d91f70>"
      ]
     },
     "execution_count": 240,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig,ax=plt.subplots()\n",
    "ax.plot(hist.history['accuracy'], color = 'b')\n",
    "ax.plot(hist.history['val_accuracy'], linestyle=':', color = 'b')\n",
    "ax.set_ylabel(\"Accuracy\", color = 'b')\n",
    "ax.set_ylim([0,1])\n",
    "ax2=ax.twinx()\n",
    "ax2.plot(hist.history['loss'],  color = 'r')\n",
    "ax2.plot(hist.history['val_loss'], linestyle=':',  color = 'r')\n",
    "ax2.set_ylabel(\"Loss (cross-entropy)\",  color = 'r')\n",
    "fig.legend(['accuracy','val_accuracy','loss','val_loss'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## CNN autoencoder\n",
    "\n",
    "Set up the CNN autoencoder <br>\n",
    "set up decoder with transpose convolutional layers"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Create an autoencoder for feature learning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 241,
   "metadata": {},
   "outputs": [],
   "source": [
    "latent_dim = 296\n",
    "\n",
    "class MyEncoder(tf.keras.Model):\n",
    "    \"\"\"\n",
    "    Based on Original HopeFullNet\n",
    "    \"\"\"\n",
    "    def __init__(self, inp_shape = (640,2)):\n",
    "        super(MyEncoder, self).__init__()\n",
    "        self.inp_shape = inp_shape\n",
    "\n",
    "        self.kernel_size_0 = 20\n",
    "        self.kernel_size_1 = 6\n",
    "        self.drop_rate = 0.5\n",
    "\n",
    "        self.conv1 = tf.keras.layers.Conv1D(filters=32,\n",
    "                                            kernel_size=self.kernel_size_0,\n",
    "                                            activation='relu',\n",
    "                                            padding= \"same\",\n",
    "                                            input_shape=self.inp_shape)\n",
    "        self.batch_n_1 = tfp.bijectors.BatchNormalization()\n",
    "        self.conv2 = tf.keras.layers.Conv1D(filters=32,\n",
    "                                            kernel_size=self.kernel_size_0,\n",
    "                                            activation='relu',\n",
    "                                            padding= \"valid\")\n",
    "        self.batch_n_2 = tfp.bijectors.BatchNormalization()\n",
    "        self.spatial_drop_1 = tf.keras.layers.SpatialDropout1D(self.drop_rate)\n",
    "        self.conv3 = tf.keras.layers.Conv1D(filters=32,\n",
    "                                            kernel_size=self.kernel_size_1,\n",
    "                                            activation='relu',\n",
    "                                            padding= \"valid\")\n",
    "        self.avg_pool1 = tf.keras.layers.AvgPool1D(pool_size=2)\n",
    "        self.conv4 = tf.keras.layers.Conv1D(filters=32,\n",
    "                                            kernel_size=self.kernel_size_1,\n",
    "                                            activation='relu',\n",
    "                                            padding= \"valid\")\n",
    "        self.spatial_drop_2 = tf.keras.layers.SpatialDropout1D(self.drop_rate)\n",
    "        self.flat = tf.keras.layers.Flatten()\n",
    "        self.out = tf.keras.layers.Dense(296, activation='relu')\n",
    "\n",
    "    def call(self, input_tensor):\n",
    "        conv1 = self.conv1(input_tensor)\n",
    "        batch_n_1 = self.batch_n_1(conv1)\n",
    "        conv2 = self.conv2(batch_n_1)\n",
    "        batch_n_2 = self.batch_n_2(conv2)\n",
    "        spatial_drop_1 = self.spatial_drop_1(batch_n_2)\n",
    "        conv3 = self.conv3(spatial_drop_1)\n",
    "        avg_pool1 = self.avg_pool1(conv3)\n",
    "        conv4 = self.conv4(avg_pool1)\n",
    "        spatial_drop_2 = self.spatial_drop_2(conv4)\n",
    "        flat = self.flat(spatial_drop_2)\n",
    "        return self.out(flat)\n",
    "\n",
    "class MyDecoder(tf.keras.Model):\n",
    "    \"\"\"\n",
    "    Based on Original HopeFullNet\n",
    "    \"\"\"\n",
    "    def __init__(self, inp_shape = (296,)):\n",
    "        super(MyDecoder, self).__init__()\n",
    "        self.inp_shape = inp_shape\n",
    "\n",
    "        self.kernel_size_0 = 20\n",
    "        self.kernel_size_1 = 6\n",
    "        self.drop_rate = 0.5\n",
    "\n",
    "        self.conv1 = tf.keras.layers.Conv1DTranspose(filters=32,\n",
    "                                            kernel_size=self.kernel_size_0,\n",
    "                                            activation='relu',\n",
    "                                            padding= \"same\",\n",
    "                                            input_shape=self.inp_shape)\n",
    "        self.batch_n_1 = tfp.bijectors.BatchNormalization()\n",
    "        self.conv2 = tf.keras.layers.Conv1DTranspose(filters=32,\n",
    "                                            kernel_size=self.kernel_size_0,\n",
    "                                            activation='relu',\n",
    "                                            padding= \"valid\")\n",
    "        self.batch_n_2 = tfp.bijectors.BatchNormalization()\n",
    "        self.spatial_drop_1 = tf.keras.layers.SpatialDropout1D(self.drop_rate)\n",
    "        self.conv3 = tf.keras.layers.Conv1DTranspose(filters=32,\n",
    "                                            kernel_size=self.kernel_size_1,\n",
    "                                            activation='relu',\n",
    "                                            padding= \"valid\")\n",
    "        self.avg_pool1 = tf.keras.layers.AvgPool1D(pool_size=2)\n",
    "        self.conv4 = tf.keras.layers.Conv1DTranspose(filters=32,\n",
    "                                            kernel_size=self.kernel_size_1,\n",
    "                                            activation='relu',\n",
    "                                            padding= \"valid\")\n",
    "        self.spatial_drop_2 = tf.keras.layers.SpatialDropout1D(self.drop_rate)\n",
    "        self.reshape1 = tf.keras.layers.Reshape((148,2))\n",
    "        self.flat = tf.keras.layers.Flatten()\n",
    "        self.dense1 = tf.keras.layers.Dense(296, activation='relu')\n",
    "        self.dropout1 = tf.keras.layers.Dropout(self.drop_rate)\n",
    "        self.dense2 = tf.keras.layers.Dense(148, activation='relu')\n",
    "        self.dropout2 = tf.keras.layers.Dropout(self.drop_rate)\n",
    "        self.out = tf.keras.layers.Dense(1280, activation='relu')\n",
    "        self.reshape2 = tf.keras.layers.Reshape((640,2))\n",
    "\n",
    "    def call(self, input_tensor):\n",
    "        dense1 = self.dense1(input_tensor)\n",
    "        flat = self.reshape1(dense1)\n",
    "        spatial_drop_2 = self.spatial_drop_2(flat)\n",
    "        conv4 = self.conv4(spatial_drop_2)\n",
    "        avg_pool1 = self.avg_pool1(conv4)\n",
    "        conv3 = self.conv3(avg_pool1)\n",
    "        spatial_drop_1 = self.spatial_drop_1(conv3)\n",
    "        batch_n_2 = self.batch_n_2(spatial_drop_1)\n",
    "        conv2 = self.conv2(batch_n_2)\n",
    "        batch_n_1 = self.batch_n_1(conv2)\n",
    "        conv1 = self.conv1(batch_n_1)\n",
    "        flat1 = self.flat(conv1)\n",
    "        last = self.out(flat1)\n",
    "        return self.reshape2(last)\n",
    "\n",
    "\n",
    "class Autoencoder(tf.keras.models.Model):\n",
    "  def __init__(self, latent_dim):\n",
    "    super(Autoencoder, self).__init__()\n",
    "    self.latent_dim = latent_dim   \n",
    "    self.encoder = MyEncoder()\n",
    "    self.decoder = MyDecoder()\n",
    "\n",
    "  def call(self, x):\n",
    "    encoded = self.encoder(x)\n",
    "    decoded = self.decoder(encoded)\n",
    "    return decoded"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Compile the autoencoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 242,
   "metadata": {},
   "outputs": [],
   "source": [
    "autoencoder = Autoencoder(latent_dim)\n",
    "autoencoder.compile(optimizer='adam', loss=losses.MeanSquaredError())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Train the autoencoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 243,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/400\n",
      "25/25 [==============================] - 8s 222ms/step - loss: 0.1542 - val_loss: 0.0545\n",
      "Epoch 2/400\n",
      "25/25 [==============================] - 5s 217ms/step - loss: 0.0492 - val_loss: 0.0473\n",
      "Epoch 3/400\n",
      "25/25 [==============================] - 6s 236ms/step - loss: 0.0473 - val_loss: 0.0480\n",
      "Epoch 4/400\n",
      "25/25 [==============================] - 7s 266ms/step - loss: 0.0473 - val_loss: 0.0474\n",
      "Epoch 5/400\n",
      "25/25 [==============================] - 6s 259ms/step - loss: 0.0473 - val_loss: 0.0471\n",
      "Epoch 6/400\n",
      "25/25 [==============================] - 6s 257ms/step - loss: 0.0476 - val_loss: 0.0472\n",
      "Epoch 7/400\n",
      "25/25 [==============================] - 6s 262ms/step - loss: 0.0473 - val_loss: 0.0474\n",
      "Epoch 8/400\n",
      "25/25 [==============================] - 7s 264ms/step - loss: 0.0472 - val_loss: 0.0486\n",
      "Epoch 9/400\n",
      "25/25 [==============================] - 6s 259ms/step - loss: 0.0477 - val_loss: 0.0472\n",
      "Epoch 10/400\n",
      "25/25 [==============================] - 6s 262ms/step - loss: 0.0474 - val_loss: 0.0473\n",
      "Epoch 11/400\n",
      "25/25 [==============================] - 7s 264ms/step - loss: 0.0474 - val_loss: 0.0470\n",
      "Epoch 12/400\n",
      "25/25 [==============================] - 7s 265ms/step - loss: 0.0471 - val_loss: 0.0472\n",
      "Epoch 13/400\n",
      "25/25 [==============================] - 7s 268ms/step - loss: 0.0475 - val_loss: 0.0491\n",
      "Epoch 14/400\n",
      "25/25 [==============================] - 7s 267ms/step - loss: 0.0473 - val_loss: 0.0470\n",
      "Epoch 15/400\n",
      "25/25 [==============================] - 7s 274ms/step - loss: 0.0466 - val_loss: 0.0466\n",
      "Epoch 16/400\n",
      "25/25 [==============================] - 7s 271ms/step - loss: 0.0472 - val_loss: 0.0492\n",
      "Epoch 17/400\n",
      "25/25 [==============================] - 7s 285ms/step - loss: 0.0474 - val_loss: 0.0466\n",
      "Epoch 18/400\n",
      "25/25 [==============================] - 7s 279ms/step - loss: 0.0466 - val_loss: 0.0466\n",
      "Epoch 19/400\n",
      "25/25 [==============================] - 7s 280ms/step - loss: 0.0474 - val_loss: 0.0465\n",
      "Epoch 20/400\n",
      "25/25 [==============================] - 7s 293ms/step - loss: 0.0467 - val_loss: 0.0466\n",
      "Epoch 21/400\n",
      "25/25 [==============================] - 7s 286ms/step - loss: 0.0466 - val_loss: 0.0464\n",
      "Epoch 22/400\n",
      "25/25 [==============================] - 7s 285ms/step - loss: 0.0465 - val_loss: 0.0464\n",
      "Epoch 23/400\n",
      "25/25 [==============================] - 7s 283ms/step - loss: 0.0465 - val_loss: 0.0463\n",
      "Epoch 24/400\n",
      "25/25 [==============================] - 7s 281ms/step - loss: 0.0465 - val_loss: 0.0470\n",
      "Epoch 25/400\n",
      "25/25 [==============================] - 7s 290ms/step - loss: 0.0467 - val_loss: 0.0467\n",
      "Epoch 26/400\n",
      "25/25 [==============================] - 7s 285ms/step - loss: 0.0468 - val_loss: 0.0468\n",
      "Epoch 27/400\n",
      "25/25 [==============================] - 7s 289ms/step - loss: 0.0470 - val_loss: 0.0470\n",
      "Epoch 28/400\n",
      "25/25 [==============================] - 7s 294ms/step - loss: 0.0466 - val_loss: 0.0464\n",
      "Epoch 29/400\n",
      "25/25 [==============================] - 7s 287ms/step - loss: 0.0465 - val_loss: 0.0467\n",
      "Epoch 30/400\n",
      "25/25 [==============================] - 7s 285ms/step - loss: 0.0467 - val_loss: 0.0463\n",
      "Epoch 31/400\n",
      "25/25 [==============================] - 7s 284ms/step - loss: 0.0468 - val_loss: 0.0481\n",
      "Epoch 32/400\n",
      "25/25 [==============================] - 7s 284ms/step - loss: 0.0471 - val_loss: 0.0464\n",
      "Epoch 33/400\n",
      "25/25 [==============================] - 7s 287ms/step - loss: 0.0467 - val_loss: 0.0468\n",
      "Epoch 34/400\n",
      "25/25 [==============================] - 7s 281ms/step - loss: 0.0463 - val_loss: 0.0461\n",
      "Epoch 35/400\n",
      "25/25 [==============================] - 7s 283ms/step - loss: 0.0461 - val_loss: 0.0462\n",
      "Epoch 36/400\n",
      "25/25 [==============================] - 7s 282ms/step - loss: 0.0449 - val_loss: 0.0441\n",
      "Epoch 37/400\n",
      "25/25 [==============================] - 7s 282ms/step - loss: 0.0440 - val_loss: 0.0440\n",
      "Epoch 38/400\n",
      "25/25 [==============================] - 7s 284ms/step - loss: 0.0439 - val_loss: 0.0438\n",
      "Epoch 39/400\n",
      "25/25 [==============================] - 7s 302ms/step - loss: 0.0440 - val_loss: 0.0440\n",
      "Epoch 40/400\n",
      "25/25 [==============================] - 7s 292ms/step - loss: 0.0438 - val_loss: 0.0437\n",
      "Epoch 41/400\n",
      "25/25 [==============================] - 7s 294ms/step - loss: 0.0432 - val_loss: 0.0431\n",
      "Epoch 42/400\n",
      "25/25 [==============================] - 7s 296ms/step - loss: 0.0431 - val_loss: 0.0430\n",
      "Epoch 43/400\n",
      "25/25 [==============================] - 7s 299ms/step - loss: 0.0428 - val_loss: 0.0431\n",
      "Epoch 44/400\n",
      "25/25 [==============================] - 7s 276ms/step - loss: 0.0429 - val_loss: 0.0424\n",
      "Epoch 45/400\n",
      "25/25 [==============================] - 7s 299ms/step - loss: 0.0426 - val_loss: 0.0424\n",
      "Epoch 46/400\n",
      "25/25 [==============================] - 7s 285ms/step - loss: 0.0425 - val_loss: 0.0426\n",
      "Epoch 47/400\n",
      "25/25 [==============================] - 7s 283ms/step - loss: 0.0427 - val_loss: 0.0424\n",
      "Epoch 48/400\n",
      "25/25 [==============================] - 7s 286ms/step - loss: 0.0428 - val_loss: 0.0424\n",
      "Epoch 49/400\n",
      "25/25 [==============================] - 7s 285ms/step - loss: 0.0425 - val_loss: 0.0424\n",
      "Epoch 50/400\n",
      "25/25 [==============================] - 7s 285ms/step - loss: 0.0425 - val_loss: 0.0424\n",
      "Epoch 51/400\n",
      "25/25 [==============================] - 7s 293ms/step - loss: 0.0426 - val_loss: 0.0428\n",
      "Epoch 52/400\n",
      "25/25 [==============================] - 7s 285ms/step - loss: 0.0425 - val_loss: 0.0424\n",
      "Epoch 53/400\n",
      "25/25 [==============================] - 7s 285ms/step - loss: 0.0425 - val_loss: 0.0424\n",
      "Epoch 54/400\n",
      "25/25 [==============================] - 7s 283ms/step - loss: 0.0425 - val_loss: 0.0425\n",
      "Epoch 55/400\n",
      "25/25 [==============================] - 7s 287ms/step - loss: 0.0425 - val_loss: 0.0425\n",
      "Epoch 56/400\n",
      "25/25 [==============================] - 7s 284ms/step - loss: 0.0424 - val_loss: 0.0424\n",
      "Epoch 57/400\n",
      "25/25 [==============================] - 7s 289ms/step - loss: 0.0425 - val_loss: 0.0424\n",
      "Epoch 58/400\n",
      "25/25 [==============================] - 7s 284ms/step - loss: 0.0425 - val_loss: 0.0425\n",
      "Epoch 59/400\n",
      "25/25 [==============================] - 7s 287ms/step - loss: 0.0425 - val_loss: 0.0424\n",
      "Epoch 60/400\n",
      "25/25 [==============================] - 7s 282ms/step - loss: 0.0424 - val_loss: 0.0425\n",
      "Epoch 61/400\n",
      "25/25 [==============================] - 7s 285ms/step - loss: 0.0425 - val_loss: 0.0427\n",
      "Epoch 62/400\n",
      "25/25 [==============================] - 8s 308ms/step - loss: 0.0423 - val_loss: 0.0424\n",
      "Epoch 63/400\n",
      "25/25 [==============================] - 8s 307ms/step - loss: 0.0421 - val_loss: 0.0421\n",
      "Epoch 64/400\n",
      "25/25 [==============================] - 8s 312ms/step - loss: 0.0415 - val_loss: 0.0416\n",
      "Epoch 65/400\n",
      "25/25 [==============================] - 7s 303ms/step - loss: 0.0418 - val_loss: 0.0416\n",
      "Epoch 66/400\n",
      "25/25 [==============================] - 8s 306ms/step - loss: 0.0418 - val_loss: 0.0417\n",
      "Epoch 67/400\n",
      "25/25 [==============================] - 8s 305ms/step - loss: 0.0418 - val_loss: 0.0420\n",
      "Epoch 68/400\n",
      "25/25 [==============================] - 8s 308ms/step - loss: 0.0418 - val_loss: 0.0417\n",
      "Epoch 69/400\n",
      "25/25 [==============================] - 8s 318ms/step - loss: 0.0418 - val_loss: 0.0422\n",
      "Epoch 70/400\n",
      "25/25 [==============================] - 8s 320ms/step - loss: 0.0418 - val_loss: 0.0417\n",
      "Epoch 71/400\n",
      "25/25 [==============================] - 8s 342ms/step - loss: 0.0418 - val_loss: 0.0417\n",
      "Epoch 72/400\n",
      "25/25 [==============================] - 8s 305ms/step - loss: 0.0417 - val_loss: 0.0421\n",
      "Epoch 73/400\n",
      "25/25 [==============================] - 8s 307ms/step - loss: 0.0418 - val_loss: 0.0419\n",
      "Epoch 74/400\n",
      "25/25 [==============================] - 8s 317ms/step - loss: 0.0418 - val_loss: 0.0416\n",
      "Epoch 75/400\n",
      "25/25 [==============================] - 8s 315ms/step - loss: 0.0416 - val_loss: 0.0416\n",
      "Epoch 76/400\n",
      "25/25 [==============================] - 8s 305ms/step - loss: 0.0417 - val_loss: 0.0417\n",
      "Epoch 77/400\n",
      "25/25 [==============================] - 8s 327ms/step - loss: 0.0418 - val_loss: 0.0423\n",
      "Epoch 78/400\n",
      "25/25 [==============================] - 8s 314ms/step - loss: 0.0419 - val_loss: 0.0418\n",
      "Epoch 79/400\n",
      "25/25 [==============================] - 8s 314ms/step - loss: 0.0417 - val_loss: 0.0417\n",
      "Epoch 80/400\n",
      "25/25 [==============================] - 8s 322ms/step - loss: 0.0418 - val_loss: 0.0418\n",
      "Epoch 81/400\n",
      "25/25 [==============================] - 7s 278ms/step - loss: 0.0417 - val_loss: 0.0417\n",
      "Epoch 82/400\n",
      "25/25 [==============================] - 7s 294ms/step - loss: 0.0417 - val_loss: 0.0418\n",
      "Epoch 83/400\n",
      "25/25 [==============================] - 7s 287ms/step - loss: 0.0418 - val_loss: 0.0416\n",
      "Epoch 84/400\n",
      "25/25 [==============================] - 7s 276ms/step - loss: 0.0417 - val_loss: 0.0418\n",
      "Epoch 85/400\n",
      "25/25 [==============================] - 7s 274ms/step - loss: 0.0418 - val_loss: 0.0417\n",
      "Epoch 86/400\n",
      "25/25 [==============================] - 7s 273ms/step - loss: 0.0417 - val_loss: 0.0420\n",
      "Epoch 87/400\n",
      "25/25 [==============================] - 7s 267ms/step - loss: 0.0418 - val_loss: 0.0419\n",
      "Epoch 88/400\n",
      "25/25 [==============================] - 7s 265ms/step - loss: 0.0418 - val_loss: 0.0418\n",
      "Epoch 89/400\n",
      "25/25 [==============================] - 7s 284ms/step - loss: 0.0418 - val_loss: 0.0417\n",
      "Epoch 90/400\n",
      "25/25 [==============================] - 7s 264ms/step - loss: 0.0417 - val_loss: 0.0417\n",
      "Epoch 91/400\n",
      "25/25 [==============================] - 7s 263ms/step - loss: 0.0419 - val_loss: 0.0422\n",
      "Epoch 92/400\n",
      "25/25 [==============================] - 7s 267ms/step - loss: 0.0419 - val_loss: 0.0418\n",
      "Epoch 93/400\n",
      "25/25 [==============================] - 6s 251ms/step - loss: 0.0417 - val_loss: 0.0417\n",
      "Epoch 94/400\n",
      "25/25 [==============================] - 6s 252ms/step - loss: 0.0418 - val_loss: 0.0416\n",
      "Epoch 95/400\n",
      "25/25 [==============================] - 6s 262ms/step - loss: 0.0417 - val_loss: 0.0419\n",
      "Epoch 96/400\n",
      "25/25 [==============================] - 6s 252ms/step - loss: 0.0418 - val_loss: 0.0419\n",
      "Epoch 97/400\n",
      "25/25 [==============================] - 6s 253ms/step - loss: 0.0418 - val_loss: 0.0417\n",
      "Epoch 98/400\n",
      "25/25 [==============================] - 6s 257ms/step - loss: 0.0418 - val_loss: 0.0416\n",
      "Epoch 99/400\n",
      "25/25 [==============================] - 6s 250ms/step - loss: 0.0414 - val_loss: 0.0410\n",
      "Epoch 100/400\n",
      "25/25 [==============================] - 6s 252ms/step - loss: 0.0412 - val_loss: 0.0410\n",
      "Epoch 101/400\n",
      "25/25 [==============================] - 7s 275ms/step - loss: 0.0410 - val_loss: 0.0409\n",
      "Epoch 102/400\n",
      "25/25 [==============================] - 6s 254ms/step - loss: 0.0409 - val_loss: 0.0408\n",
      "Epoch 103/400\n",
      "25/25 [==============================] - 6s 262ms/step - loss: 0.0410 - val_loss: 0.0408\n",
      "Epoch 104/400\n",
      "25/25 [==============================] - 6s 253ms/step - loss: 0.0410 - val_loss: 0.0408\n",
      "Epoch 105/400\n",
      "25/25 [==============================] - 7s 263ms/step - loss: 0.0409 - val_loss: 0.0409\n",
      "Epoch 106/400\n",
      "25/25 [==============================] - 6s 254ms/step - loss: 0.0412 - val_loss: 0.0412\n",
      "Epoch 107/400\n",
      "25/25 [==============================] - 6s 252ms/step - loss: 0.0409 - val_loss: 0.0410\n",
      "Epoch 108/400\n",
      "25/25 [==============================] - 6s 251ms/step - loss: 0.0410 - val_loss: 0.0408\n",
      "Epoch 109/400\n",
      "25/25 [==============================] - 6s 257ms/step - loss: 0.0410 - val_loss: 0.0408\n",
      "Epoch 110/400\n",
      "25/25 [==============================] - 6s 253ms/step - loss: 0.0409 - val_loss: 0.0409\n",
      "Epoch 111/400\n",
      "25/25 [==============================] - 6s 252ms/step - loss: 0.0409 - val_loss: 0.0408\n",
      "Epoch 112/400\n",
      "25/25 [==============================] - 6s 253ms/step - loss: 0.0409 - val_loss: 0.0409\n",
      "Epoch 113/400\n",
      "25/25 [==============================] - 6s 261ms/step - loss: 0.0409 - val_loss: 0.0410\n",
      "Epoch 114/400\n",
      "25/25 [==============================] - 6s 251ms/step - loss: 0.0410 - val_loss: 0.0410\n",
      "Epoch 115/400\n",
      "25/25 [==============================] - 6s 256ms/step - loss: 0.0411 - val_loss: 0.0409\n",
      "Epoch 116/400\n",
      "25/25 [==============================] - 6s 252ms/step - loss: 0.0410 - val_loss: 0.0409\n",
      "Epoch 117/400\n",
      "25/25 [==============================] - 6s 255ms/step - loss: 0.0410 - val_loss: 0.0409\n",
      "Epoch 118/400\n",
      "25/25 [==============================] - 6s 253ms/step - loss: 0.0410 - val_loss: 0.0408\n",
      "Epoch 119/400\n",
      "25/25 [==============================] - 6s 253ms/step - loss: 0.0410 - val_loss: 0.0409\n",
      "Epoch 120/400\n",
      "25/25 [==============================] - 6s 257ms/step - loss: 0.0409 - val_loss: 0.0413\n",
      "Epoch 121/400\n",
      "25/25 [==============================] - 6s 256ms/step - loss: 0.0410 - val_loss: 0.0409\n",
      "Epoch 122/400\n",
      "25/25 [==============================] - 6s 257ms/step - loss: 0.0410 - val_loss: 0.0410\n",
      "Epoch 123/400\n",
      "25/25 [==============================] - 6s 253ms/step - loss: 0.0410 - val_loss: 0.0408\n",
      "Epoch 124/400\n",
      "25/25 [==============================] - 6s 255ms/step - loss: 0.0409 - val_loss: 0.0410\n",
      "Epoch 125/400\n",
      "25/25 [==============================] - 7s 267ms/step - loss: 0.0410 - val_loss: 0.0409\n",
      "Epoch 126/400\n",
      "25/25 [==============================] - 6s 255ms/step - loss: 0.0410 - val_loss: 0.0418\n",
      "Epoch 127/400\n",
      "25/25 [==============================] - 6s 255ms/step - loss: 0.0409 - val_loss: 0.0410\n",
      "Epoch 128/400\n",
      "25/25 [==============================] - 6s 259ms/step - loss: 0.0411 - val_loss: 0.0408\n",
      "Epoch 129/400\n",
      "25/25 [==============================] - 6s 253ms/step - loss: 0.0411 - val_loss: 0.0406\n",
      "Epoch 130/400\n",
      "25/25 [==============================] - 7s 264ms/step - loss: 0.0410 - val_loss: 0.0407\n",
      "Epoch 131/400\n",
      "25/25 [==============================] - 6s 257ms/step - loss: 0.0407 - val_loss: 0.0406\n",
      "Epoch 132/400\n",
      "25/25 [==============================] - 6s 252ms/step - loss: 0.0408 - val_loss: 0.0408\n",
      "Epoch 133/400\n",
      "25/25 [==============================] - 6s 253ms/step - loss: 0.0408 - val_loss: 0.0408\n",
      "Epoch 134/400\n",
      "25/25 [==============================] - 6s 255ms/step - loss: 0.0408 - val_loss: 0.0406\n",
      "Epoch 135/400\n",
      "25/25 [==============================] - 6s 252ms/step - loss: 0.0408 - val_loss: 0.0408\n",
      "Epoch 136/400\n",
      "25/25 [==============================] - 6s 255ms/step - loss: 0.0408 - val_loss: 0.0406\n",
      "Epoch 137/400\n",
      "25/25 [==============================] - 6s 253ms/step - loss: 0.0407 - val_loss: 0.0408\n",
      "Epoch 138/400\n",
      "25/25 [==============================] - 6s 251ms/step - loss: 0.0407 - val_loss: 0.0407\n",
      "Epoch 139/400\n",
      "25/25 [==============================] - 6s 252ms/step - loss: 0.0408 - val_loss: 0.0406\n",
      "Epoch 140/400\n",
      "25/25 [==============================] - 6s 257ms/step - loss: 0.0408 - val_loss: 0.0407\n",
      "Epoch 141/400\n",
      "25/25 [==============================] - 6s 253ms/step - loss: 0.0410 - val_loss: 0.0407\n",
      "Epoch 142/400\n",
      "25/25 [==============================] - 6s 254ms/step - loss: 0.0408 - val_loss: 0.0408\n",
      "Epoch 143/400\n",
      "25/25 [==============================] - 6s 256ms/step - loss: 0.0408 - val_loss: 0.0413\n",
      "Epoch 144/400\n",
      "25/25 [==============================] - 6s 253ms/step - loss: 0.0409 - val_loss: 0.0409\n",
      "Epoch 145/400\n",
      "25/25 [==============================] - 8s 317ms/step - loss: 0.0411 - val_loss: 0.0409\n",
      "Epoch 146/400\n",
      "25/25 [==============================] - 12s 480ms/step - loss: 0.0408 - val_loss: 0.0406\n",
      "Epoch 147/400\n",
      "25/25 [==============================] - 9s 377ms/step - loss: 0.0408 - val_loss: 0.0406\n",
      "Epoch 148/400\n",
      "25/25 [==============================] - 10s 408ms/step - loss: 0.0407 - val_loss: 0.0407\n",
      "Epoch 149/400\n",
      "25/25 [==============================] - 11s 436ms/step - loss: 0.0407 - val_loss: 0.0407\n",
      "Epoch 150/400\n",
      "25/25 [==============================] - 11s 446ms/step - loss: 0.0409 - val_loss: 0.0407\n",
      "Epoch 151/400\n",
      "25/25 [==============================] - 11s 443ms/step - loss: 0.0407 - val_loss: 0.0408\n",
      "Epoch 152/400\n",
      "25/25 [==============================] - 11s 424ms/step - loss: 0.0407 - val_loss: 0.0407\n",
      "Epoch 153/400\n",
      "25/25 [==============================] - 10s 422ms/step - loss: 0.0407 - val_loss: 0.0409\n",
      "Epoch 154/400\n",
      "25/25 [==============================] - 11s 440ms/step - loss: 0.0407 - val_loss: 0.0404\n",
      "Epoch 155/400\n",
      "25/25 [==============================] - 11s 436ms/step - loss: 0.0407 - val_loss: 0.0406\n",
      "Epoch 156/400\n",
      "25/25 [==============================] - 11s 455ms/step - loss: 0.0405 - val_loss: 0.0405\n",
      "Epoch 157/400\n",
      "25/25 [==============================] - 10s 405ms/step - loss: 0.0406 - val_loss: 0.0412\n",
      "Epoch 158/400\n",
      "25/25 [==============================] - 9s 379ms/step - loss: 0.0406 - val_loss: 0.0404\n",
      "Epoch 159/400\n",
      "25/25 [==============================] - 9s 347ms/step - loss: 0.0405 - val_loss: 0.0409\n",
      "Epoch 160/400\n",
      "25/25 [==============================] - 8s 331ms/step - loss: 0.0406 - val_loss: 0.0405\n",
      "Epoch 161/400\n",
      "25/25 [==============================] - 8s 303ms/step - loss: 0.0405 - val_loss: 0.0404\n",
      "Epoch 162/400\n",
      "25/25 [==============================] - 8s 319ms/step - loss: 0.0406 - val_loss: 0.0404\n",
      "Epoch 163/400\n",
      "25/25 [==============================] - 7s 296ms/step - loss: 0.0405 - val_loss: 0.0404\n",
      "Epoch 164/400\n",
      "25/25 [==============================] - 8s 312ms/step - loss: 0.0407 - val_loss: 0.0407\n",
      "Epoch 165/400\n",
      "25/25 [==============================] - 7s 287ms/step - loss: 0.0405 - val_loss: 0.0404\n",
      "Epoch 166/400\n",
      "25/25 [==============================] - 7s 294ms/step - loss: 0.0406 - val_loss: 0.0405\n",
      "Epoch 167/400\n",
      "25/25 [==============================] - 7s 293ms/step - loss: 0.0407 - val_loss: 0.0405\n",
      "Epoch 168/400\n",
      "25/25 [==============================] - 7s 295ms/step - loss: 0.0406 - val_loss: 0.0403\n",
      "Epoch 169/400\n",
      "25/25 [==============================] - 7s 287ms/step - loss: 0.0405 - val_loss: 0.0403\n",
      "Epoch 170/400\n",
      "25/25 [==============================] - 7s 294ms/step - loss: 0.0404 - val_loss: 0.0403\n",
      "Epoch 171/400\n",
      "25/25 [==============================] - 7s 286ms/step - loss: 0.0404 - val_loss: 0.0410\n",
      "Epoch 172/400\n",
      "25/25 [==============================] - 7s 293ms/step - loss: 0.0405 - val_loss: 0.0403\n",
      "Epoch 173/400\n",
      "25/25 [==============================] - 7s 286ms/step - loss: 0.0403 - val_loss: 0.0403\n",
      "Epoch 174/400\n",
      "25/25 [==============================] - 7s 286ms/step - loss: 0.0405 - val_loss: 0.0402\n",
      "Epoch 175/400\n",
      "25/25 [==============================] - 7s 298ms/step - loss: 0.0403 - val_loss: 0.0403\n",
      "Epoch 176/400\n",
      "25/25 [==============================] - 7s 279ms/step - loss: 0.0404 - val_loss: 0.0404\n",
      "Epoch 177/400\n",
      "25/25 [==============================] - 7s 279ms/step - loss: 0.0405 - val_loss: 0.0403\n",
      "Epoch 178/400\n",
      "25/25 [==============================] - 7s 273ms/step - loss: 0.0404 - val_loss: 0.0404\n",
      "Epoch 179/400\n",
      "25/25 [==============================] - 7s 277ms/step - loss: 0.0403 - val_loss: 0.0407\n",
      "Epoch 180/400\n",
      "25/25 [==============================] - 7s 266ms/step - loss: 0.0403 - val_loss: 0.0406\n",
      "Epoch 181/400\n",
      "25/25 [==============================] - 7s 266ms/step - loss: 0.0404 - val_loss: 0.0403\n",
      "Epoch 182/400\n",
      "25/25 [==============================] - 7s 268ms/step - loss: 0.0407 - val_loss: 0.0406\n",
      "Epoch 183/400\n",
      "25/25 [==============================] - 6s 260ms/step - loss: 0.0405 - val_loss: 0.0403\n",
      "Epoch 184/400\n",
      "25/25 [==============================] - 6s 262ms/step - loss: 0.0404 - val_loss: 0.0403\n",
      "Epoch 185/400\n",
      "25/25 [==============================] - 7s 263ms/step - loss: 0.0403 - val_loss: 0.0402\n",
      "Epoch 186/400\n",
      "25/25 [==============================] - 7s 264ms/step - loss: 0.0404 - val_loss: 0.0403\n",
      "Epoch 187/400\n",
      "25/25 [==============================] - 7s 268ms/step - loss: 0.0403 - val_loss: 0.0403\n",
      "Epoch 188/400\n",
      "25/25 [==============================] - 7s 270ms/step - loss: 0.0405 - val_loss: 0.0402\n",
      "Epoch 189/400\n",
      "25/25 [==============================] - 6s 259ms/step - loss: 0.0402 - val_loss: 0.0402\n",
      "Epoch 190/400\n",
      "25/25 [==============================] - 6s 259ms/step - loss: 0.0402 - val_loss: 0.0401\n",
      "Epoch 191/400\n",
      "25/25 [==============================] - 7s 272ms/step - loss: 0.0402 - val_loss: 0.0401\n",
      "Epoch 192/400\n",
      "25/25 [==============================] - 6s 262ms/step - loss: 0.0402 - val_loss: 0.0401\n",
      "Epoch 193/400\n",
      "25/25 [==============================] - 6s 262ms/step - loss: 0.0402 - val_loss: 0.0405\n",
      "Epoch 194/400\n",
      "25/25 [==============================] - 6s 259ms/step - loss: 0.0402 - val_loss: 0.0401\n",
      "Epoch 195/400\n",
      "25/25 [==============================] - 6s 262ms/step - loss: 0.0402 - val_loss: 0.0402\n",
      "Epoch 196/400\n",
      "25/25 [==============================] - 7s 263ms/step - loss: 0.0403 - val_loss: 0.0401\n",
      "Epoch 197/400\n",
      "25/25 [==============================] - 7s 266ms/step - loss: 0.0402 - val_loss: 0.0410\n",
      "Epoch 198/400\n",
      "25/25 [==============================] - 7s 265ms/step - loss: 0.0406 - val_loss: 0.0406\n",
      "Epoch 199/400\n",
      "25/25 [==============================] - 6s 261ms/step - loss: 0.0404 - val_loss: 0.0403\n",
      "Epoch 200/400\n",
      "25/25 [==============================] - 6s 261ms/step - loss: 0.0403 - val_loss: 0.0402\n",
      "Epoch 201/400\n",
      "25/25 [==============================] - 7s 268ms/step - loss: 0.0403 - val_loss: 0.0403\n",
      "Epoch 202/400\n",
      "25/25 [==============================] - 7s 266ms/step - loss: 0.0402 - val_loss: 0.0404\n",
      "Epoch 203/400\n",
      "25/25 [==============================] - 7s 263ms/step - loss: 0.0403 - val_loss: 0.0398\n",
      "Epoch 204/400\n",
      "25/25 [==============================] - 7s 264ms/step - loss: 0.0400 - val_loss: 0.0403\n",
      "Epoch 205/400\n",
      "25/25 [==============================] - 7s 266ms/step - loss: 0.0400 - val_loss: 0.0397\n",
      "Epoch 206/400\n",
      "25/25 [==============================] - 7s 269ms/step - loss: 0.0398 - val_loss: 0.0396\n",
      "Epoch 207/400\n",
      "25/25 [==============================] - 7s 268ms/step - loss: 0.0398 - val_loss: 0.0396\n",
      "Epoch 208/400\n",
      "25/25 [==============================] - 7s 271ms/step - loss: 0.0397 - val_loss: 0.0397\n",
      "Epoch 209/400\n",
      "25/25 [==============================] - 7s 264ms/step - loss: 0.0398 - val_loss: 0.0396\n",
      "Epoch 210/400\n",
      "25/25 [==============================] - 7s 264ms/step - loss: 0.0397 - val_loss: 0.0397\n",
      "Epoch 211/400\n",
      "25/25 [==============================] - 7s 266ms/step - loss: 0.0397 - val_loss: 0.0398\n",
      "Epoch 212/400\n",
      "25/25 [==============================] - 7s 269ms/step - loss: 0.0397 - val_loss: 0.0396\n",
      "Epoch 213/400\n",
      "25/25 [==============================] - 7s 272ms/step - loss: 0.0396 - val_loss: 0.0396\n",
      "Epoch 214/400\n",
      "25/25 [==============================] - 7s 278ms/step - loss: 0.0397 - val_loss: 0.0396\n",
      "Epoch 215/400\n",
      "25/25 [==============================] - 7s 279ms/step - loss: 0.0397 - val_loss: 0.0396\n",
      "Epoch 216/400\n",
      "25/25 [==============================] - 7s 264ms/step - loss: 0.0396 - val_loss: 0.0396\n",
      "Epoch 217/400\n",
      "25/25 [==============================] - 7s 274ms/step - loss: 0.0397 - val_loss: 0.0396\n",
      "Epoch 218/400\n",
      "25/25 [==============================] - 7s 276ms/step - loss: 0.0396 - val_loss: 0.0395\n",
      "Epoch 219/400\n",
      "25/25 [==============================] - 7s 269ms/step - loss: 0.0397 - val_loss: 0.0395\n",
      "Epoch 220/400\n",
      "25/25 [==============================] - 7s 272ms/step - loss: 0.0396 - val_loss: 0.0408\n",
      "Epoch 221/400\n",
      "25/25 [==============================] - 7s 265ms/step - loss: 0.0401 - val_loss: 0.0410\n",
      "Epoch 222/400\n",
      "25/25 [==============================] - 7s 264ms/step - loss: 0.0402 - val_loss: 0.0399\n",
      "Epoch 223/400\n",
      "25/25 [==============================] - 7s 296ms/step - loss: 0.0397 - val_loss: 0.0396\n",
      "Epoch 224/400\n",
      "25/25 [==============================] - 7s 295ms/step - loss: 0.0397 - val_loss: 0.0397\n",
      "Epoch 225/400\n",
      "25/25 [==============================] - 7s 289ms/step - loss: 0.0398 - val_loss: 0.0399\n",
      "Epoch 226/400\n",
      "25/25 [==============================] - 7s 294ms/step - loss: 0.0397 - val_loss: 0.0396\n",
      "Epoch 227/400\n",
      "25/25 [==============================] - 7s 292ms/step - loss: 0.0397 - val_loss: 0.0397\n",
      "Epoch 228/400\n",
      "25/25 [==============================] - 7s 280ms/step - loss: 0.0397 - val_loss: 0.0396\n",
      "Epoch 229/400\n",
      "25/25 [==============================] - 7s 269ms/step - loss: 0.0397 - val_loss: 0.0397\n",
      "Epoch 230/400\n",
      "25/25 [==============================] - 7s 269ms/step - loss: 0.0397 - val_loss: 0.0396\n",
      "Epoch 231/400\n",
      "25/25 [==============================] - 7s 272ms/step - loss: 0.0398 - val_loss: 0.0398\n",
      "Epoch 232/400\n",
      "25/25 [==============================] - 7s 265ms/step - loss: 0.0397 - val_loss: 0.0396\n",
      "Epoch 233/400\n",
      "25/25 [==============================] - 7s 269ms/step - loss: 0.0396 - val_loss: 0.0395\n",
      "Epoch 234/400\n",
      "25/25 [==============================] - 7s 269ms/step - loss: 0.0398 - val_loss: 0.0396\n",
      "Epoch 235/400\n",
      "25/25 [==============================] - 7s 271ms/step - loss: 0.0397 - val_loss: 0.0396\n",
      "Epoch 236/400\n",
      "25/25 [==============================] - 6s 262ms/step - loss: 0.0396 - val_loss: 0.0396\n",
      "Epoch 237/400\n",
      "25/25 [==============================] - 7s 271ms/step - loss: 0.0397 - val_loss: 0.0397\n",
      "Epoch 238/400\n",
      "25/25 [==============================] - 7s 265ms/step - loss: 0.0398 - val_loss: 0.0396\n",
      "Epoch 239/400\n",
      "25/25 [==============================] - 7s 267ms/step - loss: 0.0397 - val_loss: 0.0397\n",
      "Epoch 240/400\n",
      "25/25 [==============================] - 7s 270ms/step - loss: 0.0397 - val_loss: 0.0395\n",
      "Epoch 241/400\n",
      "25/25 [==============================] - 7s 280ms/step - loss: 0.0396 - val_loss: 0.0396\n",
      "Epoch 242/400\n",
      "25/25 [==============================] - 7s 290ms/step - loss: 0.0397 - val_loss: 0.0396\n",
      "Epoch 243/400\n",
      "25/25 [==============================] - 7s 292ms/step - loss: 0.0399 - val_loss: 0.0396\n",
      "Epoch 244/400\n",
      "25/25 [==============================] - 7s 292ms/step - loss: 0.0395 - val_loss: 0.0395\n",
      "Epoch 245/400\n",
      "25/25 [==============================] - 8s 301ms/step - loss: 0.0395 - val_loss: 0.0402\n",
      "Epoch 246/400\n",
      "25/25 [==============================] - 7s 293ms/step - loss: 0.0398 - val_loss: 0.0394\n",
      "Epoch 247/400\n",
      "25/25 [==============================] - 7s 273ms/step - loss: 0.0396 - val_loss: 0.0394\n",
      "Epoch 248/400\n",
      "25/25 [==============================] - 7s 267ms/step - loss: 0.0395 - val_loss: 0.0395\n",
      "Epoch 249/400\n",
      "25/25 [==============================] - 6s 262ms/step - loss: 0.0395 - val_loss: 0.0393\n",
      "Epoch 250/400\n",
      "25/25 [==============================] - 7s 267ms/step - loss: 0.0394 - val_loss: 0.0394\n",
      "Epoch 251/400\n",
      "25/25 [==============================] - 7s 262ms/step - loss: 0.0395 - val_loss: 0.0394\n",
      "Epoch 252/400\n",
      "25/25 [==============================] - 7s 264ms/step - loss: 0.0395 - val_loss: 0.0395\n",
      "Epoch 253/400\n",
      "25/25 [==============================] - 6s 261ms/step - loss: 0.0395 - val_loss: 0.0396\n",
      "Epoch 254/400\n",
      "25/25 [==============================] - 7s 264ms/step - loss: 0.0396 - val_loss: 0.0394\n",
      "Epoch 255/400\n",
      "25/25 [==============================] - 6s 261ms/step - loss: 0.0395 - val_loss: 0.0394\n",
      "Epoch 256/400\n",
      "25/25 [==============================] - 7s 267ms/step - loss: 0.0394 - val_loss: 0.0393\n",
      "Epoch 257/400\n",
      "25/25 [==============================] - 7s 269ms/step - loss: 0.0395 - val_loss: 0.0394\n",
      "Epoch 258/400\n",
      "25/25 [==============================] - 7s 272ms/step - loss: 0.0395 - val_loss: 0.0394\n",
      "Epoch 259/400\n",
      "25/25 [==============================] - 7s 273ms/step - loss: 0.0394 - val_loss: 0.0394\n",
      "Epoch 260/400\n",
      "25/25 [==============================] - 7s 269ms/step - loss: 0.0395 - val_loss: 0.0394\n",
      "Epoch 261/400\n",
      "25/25 [==============================] - 7s 265ms/step - loss: 0.0395 - val_loss: 0.0395\n",
      "Epoch 262/400\n",
      "25/25 [==============================] - 7s 268ms/step - loss: 0.0394 - val_loss: 0.0394\n",
      "Epoch 263/400\n",
      "25/25 [==============================] - 7s 270ms/step - loss: 0.0394 - val_loss: 0.0394\n",
      "Epoch 264/400\n",
      "25/25 [==============================] - 7s 267ms/step - loss: 0.0396 - val_loss: 0.0394\n",
      "Epoch 265/400\n",
      "25/25 [==============================] - 7s 264ms/step - loss: 0.0395 - val_loss: 0.0394\n",
      "Epoch 266/400\n",
      "25/25 [==============================] - 7s 262ms/step - loss: 0.0395 - val_loss: 0.0394\n",
      "Epoch 267/400\n",
      "25/25 [==============================] - 7s 269ms/step - loss: 0.0395 - val_loss: 0.0393\n",
      "Epoch 268/400\n",
      "25/25 [==============================] - 7s 263ms/step - loss: 0.0394 - val_loss: 0.0396\n",
      "Epoch 269/400\n",
      "25/25 [==============================] - 7s 264ms/step - loss: 0.0395 - val_loss: 0.0394\n",
      "Epoch 270/400\n",
      "25/25 [==============================] - 7s 265ms/step - loss: 0.0394 - val_loss: 0.0394\n",
      "Epoch 271/400\n",
      "25/25 [==============================] - 7s 270ms/step - loss: 0.0394 - val_loss: 0.0394\n",
      "Epoch 272/400\n",
      "25/25 [==============================] - 7s 268ms/step - loss: 0.0395 - val_loss: 0.0394\n",
      "Epoch 273/400\n",
      "25/25 [==============================] - 7s 269ms/step - loss: 0.0395 - val_loss: 0.0394\n",
      "Epoch 274/400\n",
      "25/25 [==============================] - 7s 268ms/step - loss: 0.0395 - val_loss: 0.0394\n",
      "Epoch 275/400\n",
      "25/25 [==============================] - 6s 257ms/step - loss: 0.0395 - val_loss: 0.0394\n",
      "Epoch 276/400\n",
      "25/25 [==============================] - 6s 258ms/step - loss: 0.0394 - val_loss: 0.0394\n",
      "Epoch 277/400\n",
      "25/25 [==============================] - 6s 258ms/step - loss: 0.0396 - val_loss: 0.0394\n",
      "Epoch 278/400\n",
      "25/25 [==============================] - 6s 257ms/step - loss: 0.0396 - val_loss: 0.0395\n",
      "Epoch 279/400\n",
      "25/25 [==============================] - 6s 256ms/step - loss: 0.0395 - val_loss: 0.0396\n",
      "Epoch 280/400\n",
      "25/25 [==============================] - 6s 255ms/step - loss: 0.0395 - val_loss: 0.0394\n",
      "Epoch 281/400\n",
      "25/25 [==============================] - 6s 256ms/step - loss: 0.0394 - val_loss: 0.0395\n",
      "Epoch 282/400\n",
      "25/25 [==============================] - 6s 257ms/step - loss: 0.0394 - val_loss: 0.0397\n",
      "Epoch 283/400\n",
      "25/25 [==============================] - 6s 258ms/step - loss: 0.0397 - val_loss: 0.0396\n",
      "Epoch 284/400\n",
      "25/25 [==============================] - 6s 257ms/step - loss: 0.0396 - val_loss: 0.0396\n",
      "Epoch 285/400\n",
      "25/25 [==============================] - 6s 260ms/step - loss: 0.0394 - val_loss: 0.0393\n",
      "Epoch 286/400\n",
      "25/25 [==============================] - 7s 294ms/step - loss: 0.0394 - val_loss: 0.0394\n",
      "Epoch 287/400\n",
      "25/25 [==============================] - 7s 299ms/step - loss: 0.0395 - val_loss: 0.0394\n",
      "Epoch 288/400\n",
      "25/25 [==============================] - 7s 282ms/step - loss: 0.0394 - val_loss: 0.0394\n",
      "Epoch 289/400\n",
      "25/25 [==============================] - 7s 285ms/step - loss: 0.0394 - val_loss: 0.0395\n",
      "Epoch 290/400\n",
      "25/25 [==============================] - 7s 287ms/step - loss: 0.0395 - val_loss: 0.0394\n",
      "Epoch 291/400\n",
      "25/25 [==============================] - 7s 291ms/step - loss: 0.0394 - val_loss: 0.0394\n",
      "Epoch 292/400\n",
      "25/25 [==============================] - 7s 272ms/step - loss: 0.0395 - val_loss: 0.0394\n",
      "Epoch 293/400\n",
      "25/25 [==============================] - 7s 266ms/step - loss: 0.0394 - val_loss: 0.0394\n",
      "Epoch 294/400\n",
      "25/25 [==============================] - 7s 270ms/step - loss: 0.0394 - val_loss: 0.0393\n",
      "Epoch 295/400\n",
      "25/25 [==============================] - 7s 268ms/step - loss: 0.0393 - val_loss: 0.0393\n",
      "Epoch 296/400\n",
      "25/25 [==============================] - 7s 267ms/step - loss: 0.0393 - val_loss: 0.0392\n",
      "Epoch 297/400\n",
      "25/25 [==============================] - 7s 272ms/step - loss: 0.0393 - val_loss: 0.0392\n",
      "Epoch 298/400\n",
      "25/25 [==============================] - 7s 276ms/step - loss: 0.0393 - val_loss: 0.0392\n",
      "Epoch 299/400\n",
      "25/25 [==============================] - 8s 314ms/step - loss: 0.0392 - val_loss: 0.0392\n",
      "Epoch 300/400\n",
      "25/25 [==============================] - 7s 277ms/step - loss: 0.0392 - val_loss: 0.0398\n",
      "Epoch 301/400\n",
      "25/25 [==============================] - 7s 268ms/step - loss: 0.0394 - val_loss: 0.0392\n",
      "Epoch 302/400\n",
      "25/25 [==============================] - 7s 269ms/step - loss: 0.0393 - val_loss: 0.0392\n",
      "Epoch 303/400\n",
      "25/25 [==============================] - 7s 280ms/step - loss: 0.0392 - val_loss: 0.0392\n",
      "Epoch 304/400\n",
      "25/25 [==============================] - 7s 280ms/step - loss: 0.0393 - val_loss: 0.0392\n",
      "Epoch 305/400\n",
      "25/25 [==============================] - 7s 268ms/step - loss: 0.0393 - val_loss: 0.0392\n",
      "Epoch 306/400\n",
      "25/25 [==============================] - 7s 269ms/step - loss: 0.0393 - val_loss: 0.0392\n",
      "Epoch 307/400\n",
      "25/25 [==============================] - 7s 266ms/step - loss: 0.0392 - val_loss: 0.0392\n",
      "Epoch 308/400\n",
      "25/25 [==============================] - 7s 269ms/step - loss: 0.0393 - val_loss: 0.0392\n",
      "Epoch 309/400\n",
      "25/25 [==============================] - 7s 267ms/step - loss: 0.0393 - val_loss: 0.0392\n",
      "Epoch 310/400\n",
      "25/25 [==============================] - 7s 272ms/step - loss: 0.0393 - val_loss: 0.0392\n",
      "Epoch 311/400\n",
      "25/25 [==============================] - 7s 266ms/step - loss: 0.0393 - val_loss: 0.0392\n",
      "Epoch 312/400\n",
      "25/25 [==============================] - 7s 265ms/step - loss: 0.0393 - val_loss: 0.0393\n",
      "Epoch 313/400\n",
      "25/25 [==============================] - 7s 265ms/step - loss: 0.0392 - val_loss: 0.0392\n",
      "Epoch 314/400\n",
      "25/25 [==============================] - 7s 269ms/step - loss: 0.0392 - val_loss: 0.0392\n",
      "Epoch 315/400\n",
      "25/25 [==============================] - 7s 274ms/step - loss: 0.0394 - val_loss: 0.0392\n",
      "Epoch 316/400\n",
      "25/25 [==============================] - 7s 267ms/step - loss: 0.0394 - val_loss: 0.0389\n",
      "Epoch 317/400\n",
      "25/25 [==============================] - 7s 269ms/step - loss: 0.0391 - val_loss: 0.0392\n",
      "Epoch 318/400\n",
      "25/25 [==============================] - 7s 270ms/step - loss: 0.0392 - val_loss: 0.0389\n",
      "Epoch 319/400\n",
      "25/25 [==============================] - 7s 269ms/step - loss: 0.0391 - val_loss: 0.0390\n",
      "Epoch 320/400\n",
      "25/25 [==============================] - 7s 270ms/step - loss: 0.0391 - val_loss: 0.0391\n",
      "Epoch 321/400\n",
      "25/25 [==============================] - 7s 263ms/step - loss: 0.0390 - val_loss: 0.0389\n",
      "Epoch 322/400\n",
      "25/25 [==============================] - 6s 258ms/step - loss: 0.0391 - val_loss: 0.0392\n",
      "Epoch 323/400\n",
      "25/25 [==============================] - 6s 258ms/step - loss: 0.0396 - val_loss: 0.0390\n",
      "Epoch 324/400\n",
      "25/25 [==============================] - 6s 260ms/step - loss: 0.0393 - val_loss: 0.0390\n",
      "Epoch 325/400\n",
      "25/25 [==============================] - 6s 255ms/step - loss: 0.0391 - val_loss: 0.0391\n",
      "Epoch 326/400\n",
      "25/25 [==============================] - 6s 262ms/step - loss: 0.0391 - val_loss: 0.0390\n",
      "Epoch 327/400\n",
      "25/25 [==============================] - 7s 270ms/step - loss: 0.0390 - val_loss: 0.0389\n",
      "Epoch 328/400\n",
      "25/25 [==============================] - 6s 251ms/step - loss: 0.0391 - val_loss: 0.0389\n",
      "Epoch 329/400\n",
      "25/25 [==============================] - 7s 266ms/step - loss: 0.0394 - val_loss: 0.0395\n",
      "Epoch 330/400\n",
      "25/25 [==============================] - 6s 257ms/step - loss: 0.0390 - val_loss: 0.0388\n",
      "Epoch 331/400\n",
      "25/25 [==============================] - 7s 262ms/step - loss: 0.0388 - val_loss: 0.0387\n",
      "Epoch 332/400\n",
      "25/25 [==============================] - 6s 259ms/step - loss: 0.0388 - val_loss: 0.0387\n",
      "Epoch 333/400\n",
      "25/25 [==============================] - 6s 257ms/step - loss: 0.0388 - val_loss: 0.0387\n",
      "Epoch 334/400\n",
      "25/25 [==============================] - 6s 257ms/step - loss: 0.0388 - val_loss: 0.0387\n",
      "Epoch 335/400\n",
      "25/25 [==============================] - 6s 254ms/step - loss: 0.0389 - val_loss: 0.0388\n",
      "Epoch 336/400\n",
      "25/25 [==============================] - 6s 261ms/step - loss: 0.0388 - val_loss: 0.0387\n",
      "Epoch 337/400\n",
      "25/25 [==============================] - 6s 260ms/step - loss: 0.0388 - val_loss: 0.0389\n",
      "Epoch 338/400\n",
      "25/25 [==============================] - 7s 263ms/step - loss: 0.0388 - val_loss: 0.0387\n",
      "Epoch 339/400\n",
      "25/25 [==============================] - 6s 257ms/step - loss: 0.0388 - val_loss: 0.0387\n",
      "Epoch 340/400\n",
      "25/25 [==============================] - 6s 258ms/step - loss: 0.0388 - val_loss: 0.0389\n",
      "Epoch 341/400\n",
      "25/25 [==============================] - 6s 256ms/step - loss: 0.0388 - val_loss: 0.0388\n",
      "Epoch 342/400\n",
      "25/25 [==============================] - 6s 262ms/step - loss: 0.0388 - val_loss: 0.0387\n",
      "Epoch 343/400\n",
      "25/25 [==============================] - 6s 258ms/step - loss: 0.0388 - val_loss: 0.0387\n",
      "Epoch 344/400\n",
      "25/25 [==============================] - 6s 256ms/step - loss: 0.0388 - val_loss: 0.0386\n",
      "Epoch 345/400\n",
      "25/25 [==============================] - 6s 257ms/step - loss: 0.0387 - val_loss: 0.0387\n",
      "Epoch 346/400\n",
      "25/25 [==============================] - 6s 256ms/step - loss: 0.0387 - val_loss: 0.0387\n",
      "Epoch 347/400\n",
      "25/25 [==============================] - 6s 259ms/step - loss: 0.0388 - val_loss: 0.0387\n",
      "Epoch 348/400\n",
      "25/25 [==============================] - 6s 253ms/step - loss: 0.0387 - val_loss: 0.0387\n",
      "Epoch 349/400\n",
      "25/25 [==============================] - 6s 258ms/step - loss: 0.0388 - val_loss: 0.0387\n",
      "Epoch 350/400\n",
      "25/25 [==============================] - 6s 258ms/step - loss: 0.0388 - val_loss: 0.0387\n",
      "Epoch 351/400\n",
      "25/25 [==============================] - 6s 260ms/step - loss: 0.0388 - val_loss: 0.0387\n",
      "Epoch 352/400\n",
      "25/25 [==============================] - 6s 257ms/step - loss: 0.0388 - val_loss: 0.0387\n",
      "Epoch 353/400\n",
      "25/25 [==============================] - 6s 261ms/step - loss: 0.0387 - val_loss: 0.0387\n",
      "Epoch 354/400\n",
      "25/25 [==============================] - 7s 279ms/step - loss: 0.0388 - val_loss: 0.0388\n",
      "Epoch 355/400\n",
      "25/25 [==============================] - 6s 260ms/step - loss: 0.0388 - val_loss: 0.0388\n",
      "Epoch 356/400\n",
      "25/25 [==============================] - 7s 269ms/step - loss: 0.0388 - val_loss: 0.0387\n",
      "Epoch 357/400\n",
      "25/25 [==============================] - 6s 253ms/step - loss: 0.0388 - val_loss: 0.0386\n",
      "Epoch 358/400\n",
      "25/25 [==============================] - 7s 268ms/step - loss: 0.0388 - val_loss: 0.0387\n",
      "Epoch 359/400\n",
      "25/25 [==============================] - 6s 256ms/step - loss: 0.0387 - val_loss: 0.0390\n",
      "Epoch 360/400\n",
      "25/25 [==============================] - 6s 259ms/step - loss: 0.0388 - val_loss: 0.0388\n",
      "Epoch 361/400\n",
      "25/25 [==============================] - 6s 257ms/step - loss: 0.0388 - val_loss: 0.0389\n",
      "Epoch 362/400\n",
      "25/25 [==============================] - 6s 255ms/step - loss: 0.0388 - val_loss: 0.0387\n",
      "Epoch 363/400\n",
      "25/25 [==============================] - 6s 253ms/step - loss: 0.0388 - val_loss: 0.0389\n",
      "Epoch 364/400\n",
      "25/25 [==============================] - 6s 256ms/step - loss: 0.0388 - val_loss: 0.0390\n",
      "Epoch 365/400\n",
      "25/25 [==============================] - 6s 253ms/step - loss: 0.0388 - val_loss: 0.0387\n",
      "Epoch 366/400\n",
      "25/25 [==============================] - 6s 257ms/step - loss: 0.0389 - val_loss: 0.0387\n",
      "Epoch 367/400\n",
      "25/25 [==============================] - 6s 258ms/step - loss: 0.0388 - val_loss: 0.0386\n",
      "Epoch 368/400\n",
      "25/25 [==============================] - 6s 259ms/step - loss: 0.0387 - val_loss: 0.0387\n",
      "Epoch 369/400\n",
      "25/25 [==============================] - 6s 258ms/step - loss: 0.0389 - val_loss: 0.0388\n",
      "Epoch 370/400\n",
      "25/25 [==============================] - 6s 257ms/step - loss: 0.0390 - val_loss: 0.0387\n",
      "Epoch 371/400\n",
      "25/25 [==============================] - 6s 257ms/step - loss: 0.0389 - val_loss: 0.0392\n",
      "Epoch 372/400\n",
      "25/25 [==============================] - 6s 260ms/step - loss: 0.0390 - val_loss: 0.0387\n",
      "Epoch 373/400\n",
      "25/25 [==============================] - 6s 257ms/step - loss: 0.0388 - val_loss: 0.0387\n",
      "Epoch 374/400\n",
      "25/25 [==============================] - 6s 258ms/step - loss: 0.0387 - val_loss: 0.0387\n",
      "Epoch 375/400\n",
      "25/25 [==============================] - 6s 258ms/step - loss: 0.0388 - val_loss: 0.0387\n",
      "Epoch 376/400\n",
      "25/25 [==============================] - 6s 255ms/step - loss: 0.0388 - val_loss: 0.0386\n",
      "Epoch 377/400\n",
      "25/25 [==============================] - 7s 263ms/step - loss: 0.0388 - val_loss: 0.0387\n",
      "Epoch 378/400\n",
      "25/25 [==============================] - 6s 256ms/step - loss: 0.0388 - val_loss: 0.0388\n",
      "Epoch 379/400\n",
      "25/25 [==============================] - 6s 254ms/step - loss: 0.0388 - val_loss: 0.0387\n",
      "Epoch 380/400\n",
      "25/25 [==============================] - 6s 256ms/step - loss: 0.0390 - val_loss: 0.0387\n",
      "Epoch 381/400\n",
      "25/25 [==============================] - 6s 259ms/step - loss: 0.0388 - val_loss: 0.0387\n",
      "Epoch 382/400\n",
      "25/25 [==============================] - 6s 257ms/step - loss: 0.0388 - val_loss: 0.0389\n",
      "Epoch 383/400\n",
      "25/25 [==============================] - 6s 262ms/step - loss: 0.0388 - val_loss: 0.0387\n",
      "Epoch 384/400\n",
      "25/25 [==============================] - 6s 256ms/step - loss: 0.0388 - val_loss: 0.0387\n",
      "Epoch 385/400\n",
      "25/25 [==============================] - 7s 268ms/step - loss: 0.0388 - val_loss: 0.0387\n",
      "Epoch 386/400\n",
      "25/25 [==============================] - 7s 268ms/step - loss: 0.0388 - val_loss: 0.0387\n",
      "Epoch 387/400\n",
      "25/25 [==============================] - 6s 248ms/step - loss: 0.0387 - val_loss: 0.0387\n",
      "Epoch 388/400\n",
      "25/25 [==============================] - 7s 261ms/step - loss: 0.0388 - val_loss: 0.0387\n",
      "Epoch 389/400\n",
      "25/25 [==============================] - 6s 258ms/step - loss: 0.0388 - val_loss: 0.0388\n",
      "Epoch 390/400\n",
      "25/25 [==============================] - 6s 262ms/step - loss: 0.0388 - val_loss: 0.0386\n",
      "Epoch 391/400\n",
      "25/25 [==============================] - 6s 255ms/step - loss: 0.0386 - val_loss: 0.0385\n",
      "Epoch 392/400\n",
      "25/25 [==============================] - 6s 257ms/step - loss: 0.0386 - val_loss: 0.0385\n",
      "Epoch 393/400\n",
      "25/25 [==============================] - 6s 258ms/step - loss: 0.0386 - val_loss: 0.0385\n",
      "Epoch 394/400\n",
      "25/25 [==============================] - 6s 257ms/step - loss: 0.0387 - val_loss: 0.0386\n",
      "Epoch 395/400\n",
      "25/25 [==============================] - 6s 261ms/step - loss: 0.0386 - val_loss: 0.0386\n",
      "Epoch 396/400\n",
      "25/25 [==============================] - 6s 258ms/step - loss: 0.0386 - val_loss: 0.0386\n",
      "Epoch 397/400\n",
      "25/25 [==============================] - 6s 257ms/step - loss: 0.0387 - val_loss: 0.0385\n",
      "Epoch 398/400\n",
      "25/25 [==============================] - 6s 260ms/step - loss: 0.0386 - val_loss: 0.0385\n",
      "Epoch 399/400\n",
      "25/25 [==============================] - 6s 258ms/step - loss: 0.0386 - val_loss: 0.0389\n",
      "Epoch 400/400\n",
      "25/25 [==============================] - 6s 259ms/step - loss: 0.0388 - val_loss: 0.0385\n"
     ]
    }
   ],
   "source": [
    "hist = autoencoder.fit(x_train_reshaped, x_train_reshaped,\n",
    "                epochs=400,\n",
    "                shuffle=True,\n",
    "                validation_data=(x_valid_reshaped, x_valid_reshaped))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 244,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x1894773e220>"
      ]
     },
     "execution_count": 244,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(hist.history['loss'])\n",
    "plt.plot(hist.history['val_loss'])\n",
    "plt.legend(['loss', 'val_loss'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 245,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:Skipping full serialization of Keras layer <keras.layers.core.dropout.Dropout object at 0x000001894714B220>, because it is not built.\n",
      "WARNING:tensorflow:Skipping full serialization of Keras layer <keras.layers.core.dense.Dense object at 0x000001894714B340>, because it is not built.\n",
      "WARNING:tensorflow:Skipping full serialization of Keras layer <keras.layers.core.dropout.Dropout object at 0x000001894714B790>, because it is not built.\n",
      "WARNING:tensorflow:From C:\\Users\\james\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.9_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python39\\site-packages\\tensorflow\\python\\training\\tracking\\autotrackable.py:90: Bijector.has_static_min_event_ndims (from tensorflow_probability.python.bijectors.bijector) is deprecated and will be removed after 2021-08-01.\n",
      "Instructions for updating:\n",
      "`min_event_ndims` is now static for all bijectors; this property is no longer needed.\n",
      "INFO:tensorflow:Assets written to: C:\\Users\\james\\OneDrive\\GradSchool\\Spring 2022\\autoencoderOnlineDataModel\\assets\n"
     ]
    }
   ],
   "source": [
    "\n",
    "autoencoder.build(input_shape=(None, 640,2))\n",
    "autoencoder.save(filepath+'\\\\models\\\\autoencoderOnlineDataModel')\n",
    "# tf.keras.models.save_model(\n",
    "#     autoencoder,\n",
    "#     filepath+'\\\\autoencoderModel',\n",
    "#     overwrite=True,\n",
    "#     include_optimizer=True,\n",
    "#     save_format=None,\n",
    "#     signatures=None,\n",
    "#     options=None,\n",
    "#     save_traces=True\n",
    "# )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 246,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"autoencoder\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " my_encoder (MyEncoder)      multiple                  2904744   \n",
      "                                                                 \n",
      " my_decoder (MyDecoder)      multiple                  4233064   \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 7,137,808\n",
      "Trainable params: 7,137,552\n",
      "Non-trainable params: 256\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "autoencoder.summary()\n",
    "\n",
    "# # define an encoder model (without the decoder)\n",
    "# encoder = tf.keras.models.Model(autoencoder.input, autoencoder.layers[0].output)\n",
    "# # save the encoder to file\n",
    "# encoder.summary()\n",
    "# encoder.save(filepath+'\\\\encoderModel')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## append an MLP to the trained encoder\n",
    "\n",
    "(Brain Surgery) <br>\n",
    "\n",
    "Clip off the encoder part of the neural network<br>\n",
    "Freeze the lower convoluutional layers<br>\n",
    "\n",
    "Connect to another couple of fully connected layers<br>\n",
    "Only train those last few layers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 278,
   "metadata": {},
   "outputs": [],
   "source": [
    "autoencoder_loaded = tf.keras.models.load_model(filepath+'\\\\models\\\\autoencoderOnlineDataModel')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Freeze encoder and add an MLP to the output of the encoder in another network"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 279,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<keras.layers.convolutional.Conv1D object at 0x000001893C969B20>\n",
      "False\n",
      "<keras.layers.convolutional.Conv1D object at 0x00000189470697C0>\n",
      "False\n",
      "<keras.layers.core.spatial_dropout.SpatialDropout1D object at 0x0000018947099E20>\n",
      "False\n",
      "<keras.layers.convolutional.Conv1D object at 0x0000018947099AF0>\n",
      "False\n",
      "<keras.layers.pooling.AveragePooling1D object at 0x0000018947099CD0>\n",
      "False\n",
      "<keras.layers.convolutional.Conv1D object at 0x00000189470D8070>\n",
      "False\n",
      "<keras.layers.core.spatial_dropout.SpatialDropout1D object at 0x00000189470D87C0>\n",
      "False\n",
      "<keras.layers.core.flatten.Flatten object at 0x00000189470D8C40>\n",
      "False\n",
      "<keras.layers.core.dense.Dense object at 0x0000018936A6EAC0>\n",
      "True\n",
      "<keras.layers.core.dropout.Dropout object at 0x0000018938B20700>\n",
      "True\n",
      "<keras.layers.core.dense.Dense object at 0x00000189559175B0>\n",
      "True\n",
      "<keras.layers.core.dropout.Dropout object at 0x0000018947982730>\n",
      "True\n",
      "<keras.layers.core.dense.Dense object at 0x000001893898FB80>\n",
      "True\n",
      "<keras.layers.core.dropout.Dropout object at 0x00000189553AEF10>\n",
      "True\n",
      "<keras.layers.core.dense.Dense object at 0x00000189558EF6A0>\n",
      "True\n",
      "Model: \"sequential_23\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " conv1d_20 (Conv1D)          (None, 640, 32)           1312      \n",
      "                                                                 \n",
      " conv1d_21 (Conv1D)          (None, 621, 32)           20512     \n",
      "                                                                 \n",
      " spatial_dropout1d_10 (Spati  (None, 621, 32)          0         \n",
      " alDropout1D)                                                    \n",
      "                                                                 \n",
      " conv1d_22 (Conv1D)          (None, 616, 32)           6176      \n",
      "                                                                 \n",
      " average_pooling1d_5 (Averag  (None, 308, 32)          0         \n",
      " ePooling1D)                                                     \n",
      "                                                                 \n",
      " conv1d_23 (Conv1D)          (None, 303, 32)           6176      \n",
      "                                                                 \n",
      " spatial_dropout1d_11 (Spati  (None, 303, 32)          0         \n",
      " alDropout1D)                                                    \n",
      "                                                                 \n",
      " flatten_5 (Flatten)         (None, 9696)              0         \n",
      "                                                                 \n",
      " dense_111 (Dense)           (None, 296)               2870312   \n",
      "                                                                 \n",
      " dropout_81 (Dropout)        (None, 296)               0         \n",
      "                                                                 \n",
      " dense_112 (Dense)           (None, 148)               43956     \n",
      "                                                                 \n",
      " dropout_82 (Dropout)        (None, 148)               0         \n",
      "                                                                 \n",
      " dense_113 (Dense)           (None, 74)                11026     \n",
      "                                                                 \n",
      " dropout_83 (Dropout)        (None, 74)                0         \n",
      "                                                                 \n",
      " dense_114 (Dense)           (None, 4)                 300       \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 2,959,770\n",
      "Trainable params: 2,925,594\n",
      "Non-trainable params: 34,176\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "NewNet = tf.keras.Sequential()\n",
    "for layer in autoencoder.encoder.layers[:-1]:\n",
    "    layer.trainable = False\n",
    "    NewNet.add(layer)\n",
    "drop_rate = 0.5\n",
    "NewNet.add(tf.keras.layers.Dense(296, activation='relu'))\n",
    "NewNet.add(tf.keras.layers.Dropout(drop_rate))\n",
    "NewNet.add(tf.keras.layers.Dense(148, activation='relu'))\n",
    "NewNet.add(tf.keras.layers.Dropout(drop_rate))\n",
    "NewNet.add(tf.keras.layers.Dense(74, activation='relu'))\n",
    "NewNet.add(tf.keras.layers.Dropout(drop_rate))\n",
    "NewNet.add(tf.keras.layers.Dense(4, activation='softmax'))\n",
    "\n",
    "# check trainablitity\n",
    "\n",
    "for layer in NewNet.layers:\n",
    "    print(layer)\n",
    "    print(layer.trainable)\n",
    "\n",
    "NewNet.summary()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 286,
   "metadata": {},
   "outputs": [],
   "source": [
    "learning_rate = 1e-4\n",
    "\n",
    "loss = tf.keras.losses.categorical_crossentropy\n",
    "optimizer = tf.keras.optimizers.Adam(learning_rate=learning_rate)\n",
    "\n",
    "NewNet.compile(loss=loss, optimizer=optimizer, metrics=['accuracy'])\n",
    "\n",
    "# Where to save model\n",
    "modelPath = r'\\models\\autoencoderMlpModel.h5'\n",
    "\n",
    "# build callback list\n",
    "checkpoint = ModelCheckpoint( # set model saving checkpoints\n",
    "    modelPath, # set path to save model weights\n",
    "    monitor='val_loss', # set monitor metrics\n",
    "    verbose=1, # set training verbosity\n",
    "    save_best_only=True, # set if want to save only best weights\n",
    "    save_weights_only=True, # set if you want to save only model weights\n",
    "    mode='auto', # set if save min or max in metrics\n",
    "    save_freq='epoch' # interval between checkpoints\n",
    "    )\n",
    "\n",
    "earlystopping = EarlyStopping(\n",
    "    monitor='val_loss', # set monitor metrics\n",
    "    min_delta=0.00001, # set minimum metrics delta\n",
    "    patience=10, # number of epochs to stop training\n",
    "    restore_best_weights=True, # set if use best weights or last weights\n",
    "    )\n",
    "callbacksList = [checkpoint, earlystopping] # build callbacks list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 287,
   "metadata": {},
   "outputs": [],
   "source": [
    "NewNet.build(input_shape = (None,640,2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 288,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/200\n",
      "90/91 [============================>.] - ETA: 0s - loss: 1.3862 - accuracy: 0.2478\n",
      "Epoch 1: val_loss improved from inf to 1.38630, saving model to C:\\Users\\james\\OneDrive\\GradSchool\\Spring 2022\\anotherGoodModel.h5\n",
      "91/91 [==============================] - 4s 37ms/step - loss: 1.3862 - accuracy: 0.2467 - val_loss: 1.3863 - val_accuracy: 0.2503\n",
      "Epoch 2/200\n",
      "91/91 [==============================] - ETA: 0s - loss: 1.3864 - accuracy: 0.2555\n",
      "Epoch 2: val_loss improved from 1.38630 to 1.38630, saving model to C:\\Users\\james\\OneDrive\\GradSchool\\Spring 2022\\anotherGoodModel.h5\n",
      "91/91 [==============================] - 3s 34ms/step - loss: 1.3864 - accuracy: 0.2555 - val_loss: 1.3863 - val_accuracy: 0.2503\n",
      "Epoch 3/200\n",
      "90/91 [============================>.] - ETA: 0s - loss: 1.3864 - accuracy: 0.2556\n",
      "Epoch 3: val_loss improved from 1.38630 to 1.38630, saving model to C:\\Users\\james\\OneDrive\\GradSchool\\Spring 2022\\anotherGoodModel.h5\n",
      "91/91 [==============================] - 3s 34ms/step - loss: 1.3864 - accuracy: 0.2555 - val_loss: 1.3863 - val_accuracy: 0.2503\n",
      "Epoch 4/200\n",
      "89/91 [============================>.] - ETA: 0s - loss: 1.3865 - accuracy: 0.2652\n",
      "Epoch 4: val_loss did not improve from 1.38630\n",
      "91/91 [==============================] - 3s 33ms/step - loss: 1.3866 - accuracy: 0.2610 - val_loss: 1.3863 - val_accuracy: 0.2503\n",
      "Epoch 5/200\n",
      "91/91 [==============================] - ETA: 0s - loss: 1.3869 - accuracy: 0.2401\n",
      "Epoch 5: val_loss did not improve from 1.38630\n",
      "91/91 [==============================] - 3s 33ms/step - loss: 1.3869 - accuracy: 0.2401 - val_loss: 1.3863 - val_accuracy: 0.2503\n",
      "Epoch 6/200\n",
      "90/91 [============================>.] - ETA: 0s - loss: 1.3868 - accuracy: 0.2367\n",
      "Epoch 6: val_loss did not improve from 1.38630\n",
      "91/91 [==============================] - 3s 33ms/step - loss: 1.3868 - accuracy: 0.2346 - val_loss: 1.3863 - val_accuracy: 0.2503\n",
      "Epoch 7/200\n",
      "89/91 [============================>.] - ETA: 0s - loss: 1.3866 - accuracy: 0.2427\n",
      "Epoch 7: val_loss did not improve from 1.38630\n",
      "91/91 [==============================] - 3s 32ms/step - loss: 1.3866 - accuracy: 0.2456 - val_loss: 1.3863 - val_accuracy: 0.2503\n",
      "Epoch 8/200\n",
      "91/91 [==============================] - ETA: 0s - loss: 1.3862 - accuracy: 0.2533\n",
      "Epoch 8: val_loss improved from 1.38630 to 1.38629, saving model to C:\\Users\\james\\OneDrive\\GradSchool\\Spring 2022\\anotherGoodModel.h5\n",
      "91/91 [==============================] - 3s 32ms/step - loss: 1.3862 - accuracy: 0.2533 - val_loss: 1.3863 - val_accuracy: 0.2503\n",
      "Epoch 9/200\n",
      "90/91 [============================>.] - ETA: 0s - loss: 1.3862 - accuracy: 0.2489\n",
      "Epoch 9: val_loss did not improve from 1.38629\n",
      "91/91 [==============================] - 3s 33ms/step - loss: 1.3862 - accuracy: 0.2467 - val_loss: 1.3863 - val_accuracy: 0.2503\n",
      "Epoch 10/200\n",
      "89/91 [============================>.] - ETA: 0s - loss: 1.3866 - accuracy: 0.2157\n",
      "Epoch 10: val_loss did not improve from 1.38629\n",
      "91/91 [==============================] - 3s 34ms/step - loss: 1.3866 - accuracy: 0.2181 - val_loss: 1.3863 - val_accuracy: 0.2503\n",
      "Epoch 11/200\n",
      "90/91 [============================>.] - ETA: 0s - loss: 1.3864 - accuracy: 0.2411\n",
      "Epoch 11: val_loss did not improve from 1.38629\n",
      "91/91 [==============================] - 3s 33ms/step - loss: 1.3864 - accuracy: 0.2401 - val_loss: 1.3863 - val_accuracy: 0.2503\n"
     ]
    }
   ],
   "source": [
    "hist = NewNet.fit(x_test_reshaped, y_test_OH, epochs=100, batch_size=10,\n",
    "                    validation_data=(x_valid_reshaped, y_valid_OH), callbacks=callbacksList)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 274,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x1893b6474f0>"
      ]
     },
     "execution_count": 274,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig,ax=plt.subplots()\n",
    "ax.plot(hist.history['accuracy'], color = 'b')\n",
    "ax.plot(hist.history['val_accuracy'], linestyle=':', color = 'b')\n",
    "ax.set_ylabel(\"Accuracy\", color = 'b')\n",
    "ax.set_ylim([0,1])\n",
    "ax2=ax.twinx()\n",
    "ax2.plot(hist.history['loss'],  color = 'r')\n",
    "ax2.plot(hist.history['val_loss'], linestyle=':',  color = 'r')\n",
    "ax2.set_ylabel(\"Loss (cross-entropy)\",  color = 'r')\n",
    "fig.legend(['accuracy','val_accuracy','loss','val_loss'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Transfer learning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 289,
   "metadata": {},
   "outputs": [],
   "source": [
    "trainedModel_loaded = tf.keras.models.load_model(filepath + '\\\\models\\\\PreTrainedModel')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Replace the output layer for 4 rather than 5 classes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 290,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_24\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " conv1d (Conv1D)             (None, 640, 32)           1312      \n",
      "                                                                 \n",
      " batch_normalization (BatchN  (None, 640, 32)          128       \n",
      " ormalization)                                                   \n",
      "                                                                 \n",
      " conv1d_1 (Conv1D)           (None, 621, 32)           20512     \n",
      "                                                                 \n",
      " batch_normalization_1 (Batc  (None, 621, 32)          128       \n",
      " hNormalization)                                                 \n",
      "                                                                 \n",
      " spatial_dropout1d (SpatialD  (None, 621, 32)          0         \n",
      " ropout1D)                                                       \n",
      "                                                                 \n",
      " conv1d_2 (Conv1D)           (None, 616, 32)           6176      \n",
      "                                                                 \n",
      " average_pooling1d (AverageP  (None, 308, 32)          0         \n",
      " ooling1D)                                                       \n",
      "                                                                 \n",
      " conv1d_3 (Conv1D)           (None, 303, 32)           6176      \n",
      "                                                                 \n",
      " spatial_dropout1d_1 (Spatia  (None, 303, 32)          0         \n",
      " lDropout1D)                                                     \n",
      "                                                                 \n",
      " flatten (Flatten)           (None, 9696)              0         \n",
      "                                                                 \n",
      " dense_115 (Dense)           (None, 296)               2870312   \n",
      "                                                                 \n",
      " dropout_84 (Dropout)        (None, 296)               0         \n",
      "                                                                 \n",
      " dense_116 (Dense)           (None, 148)               43956     \n",
      "                                                                 \n",
      " dropout_85 (Dropout)        (None, 148)               0         \n",
      "                                                                 \n",
      " dense_117 (Dense)           (None, 74)                11026     \n",
      "                                                                 \n",
      " dropout_86 (Dropout)        (None, 74)                0         \n",
      "                                                                 \n",
      " dense_118 (Dense)           (None, 4)                 300       \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 2,960,026\n",
      "Trainable params: 2,959,898\n",
      "Non-trainable params: 128\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "trainedModel_newLayers = tf.keras.Sequential()\n",
    "for layer in trainedModel_loaded.layers[:10]: # go through until flatten layer\n",
    "    trainedModel_newLayers.add(layer)\n",
    "\n",
    "trainedModel_newLayers.add(tf.keras.layers.Dense(296, activation='relu'))\n",
    "trainedModel_newLayers.add(tf.keras.layers.Dropout(0.5))\n",
    "trainedModel_newLayers.add(tf.keras.layers.Dense(148, activation='relu'))\n",
    "trainedModel_newLayers.add(tf.keras.layers.Dropout(0.5))\n",
    "trainedModel_newLayers.add(tf.keras.layers.Dense(74, activation='relu'))\n",
    "trainedModel_newLayers.add(tf.keras.layers.Dropout(0.5))\n",
    "trainedModel_newLayers.add(tf.keras.layers.Dense(4, activation='softmax'))\n",
    "\n",
    "trainedModel_newLayers.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Freeze the first few convolutional layers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 291,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<keras.layers.convolutional.Conv1D object at 0x0000018955C86760>\n",
      "Trainable? False\n",
      "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x00000189566E4220>\n",
      "Trainable? False\n",
      "<keras.layers.convolutional.Conv1D object at 0x00000189566E4820>\n",
      "Trainable? False\n",
      "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x00000189566EE430>\n",
      "Trainable? False\n",
      "<keras.layers.core.spatial_dropout.SpatialDropout1D object at 0x00000189566EEA30>\n",
      "Trainable? False\n",
      "<keras.layers.convolutional.Conv1D object at 0x00000189566F42B0>\n",
      "Trainable? False\n",
      "<keras.layers.pooling.AveragePooling1D object at 0x00000189566F4A30>\n",
      "Trainable? False\n",
      "<keras.layers.convolutional.Conv1D object at 0x00000189566F4C70>\n",
      "Trainable? False\n",
      "<keras.layers.core.spatial_dropout.SpatialDropout1D object at 0x00000189566FB490>\n",
      "Trainable? False\n",
      "<keras.layers.core.flatten.Flatten object at 0x00000189566FB790>\n",
      "Trainable? False\n",
      "<keras.layers.core.dense.Dense object at 0x0000018955CE8FD0>\n",
      "Trainable? True\n",
      "<keras.layers.core.dropout.Dropout object at 0x0000018955D03BB0>\n",
      "Trainable? True\n",
      "<keras.layers.core.dense.Dense object at 0x0000018958BB0F70>\n",
      "Trainable? True\n",
      "<keras.layers.core.dropout.Dropout object at 0x0000018958BCAA00>\n",
      "Trainable? True\n",
      "<keras.layers.core.dense.Dense object at 0x0000018958BCADC0>\n",
      "Trainable? True\n",
      "<keras.layers.core.dropout.Dropout object at 0x0000018958BAEE80>\n",
      "Trainable? True\n",
      "<keras.layers.core.dense.Dense object at 0x0000018958BD2F10>\n",
      "Trainable? True\n",
      "Model: \"sequential_24\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " conv1d (Conv1D)             (None, 640, 32)           1312      \n",
      "                                                                 \n",
      " batch_normalization (BatchN  (None, 640, 32)          128       \n",
      " ormalization)                                                   \n",
      "                                                                 \n",
      " conv1d_1 (Conv1D)           (None, 621, 32)           20512     \n",
      "                                                                 \n",
      " batch_normalization_1 (Batc  (None, 621, 32)          128       \n",
      " hNormalization)                                                 \n",
      "                                                                 \n",
      " spatial_dropout1d (SpatialD  (None, 621, 32)          0         \n",
      " ropout1D)                                                       \n",
      "                                                                 \n",
      " conv1d_2 (Conv1D)           (None, 616, 32)           6176      \n",
      "                                                                 \n",
      " average_pooling1d (AverageP  (None, 308, 32)          0         \n",
      " ooling1D)                                                       \n",
      "                                                                 \n",
      " conv1d_3 (Conv1D)           (None, 303, 32)           6176      \n",
      "                                                                 \n",
      " spatial_dropout1d_1 (Spatia  (None, 303, 32)          0         \n",
      " lDropout1D)                                                     \n",
      "                                                                 \n",
      " flatten (Flatten)           (None, 9696)              0         \n",
      "                                                                 \n",
      " dense_115 (Dense)           (None, 296)               2870312   \n",
      "                                                                 \n",
      " dropout_84 (Dropout)        (None, 296)               0         \n",
      "                                                                 \n",
      " dense_116 (Dense)           (None, 148)               43956     \n",
      "                                                                 \n",
      " dropout_85 (Dropout)        (None, 148)               0         \n",
      "                                                                 \n",
      " dense_117 (Dense)           (None, 74)                11026     \n",
      "                                                                 \n",
      " dropout_86 (Dropout)        (None, 74)                0         \n",
      "                                                                 \n",
      " dense_118 (Dense)           (None, 4)                 300       \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 2,960,026\n",
      "Trainable params: 2,925,594\n",
      "Non-trainable params: 34,432\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "for i in range(10):\n",
    "    trainedModel_newLayers.layers[i].trainable = False\n",
    "\n",
    "for layer in trainedModel_newLayers.layers:\n",
    "    print(layer)\n",
    "    print('Trainable? ' + str(layer.trainable))\n",
    "\n",
    "trainedModel_newLayers.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 292,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving to: c:\\Users\\james\\OneDrive\\GradSchool\\Spring 2022\\tunedMode.h5\n",
      "Epoch 1/100\n",
      "77/78 [============================>.] - ETA: 0s - loss: 1.4206 - accuracy: 0.2221\n",
      "Epoch 1: val_loss improved from inf to 1.38622, saving model to c:\\Users\\james\\OneDrive\\GradSchool\\Spring 2022\\tunedMode.h5\n",
      "78/78 [==============================] - 4s 44ms/step - loss: 1.4198 - accuracy: 0.2227 - val_loss: 1.3862 - val_accuracy: 0.2500\n",
      "Epoch 2/100\n",
      "77/78 [============================>.] - ETA: 0s - loss: 1.4004 - accuracy: 0.2545\n",
      "Epoch 2: val_loss improved from 1.38622 to 1.38435, saving model to c:\\Users\\james\\OneDrive\\GradSchool\\Spring 2022\\tunedMode.h5\n",
      "78/78 [==============================] - 3s 38ms/step - loss: 1.4004 - accuracy: 0.2535 - val_loss: 1.3844 - val_accuracy: 0.2919\n",
      "Epoch 3/100\n",
      "77/78 [============================>.] - ETA: 0s - loss: 1.3861 - accuracy: 0.2831\n",
      "Epoch 3: val_loss improved from 1.38435 to 1.38280, saving model to c:\\Users\\james\\OneDrive\\GradSchool\\Spring 2022\\tunedMode.h5\n",
      "78/78 [==============================] - 3s 41ms/step - loss: 1.3861 - accuracy: 0.2844 - val_loss: 1.3828 - val_accuracy: 0.2665\n",
      "Epoch 4/100\n",
      "77/78 [============================>.] - ETA: 0s - loss: 1.3900 - accuracy: 0.2935\n",
      "Epoch 4: val_loss did not improve from 1.38280\n",
      "78/78 [==============================] - 3s 38ms/step - loss: 1.3899 - accuracy: 0.2934 - val_loss: 1.3833 - val_accuracy: 0.2643\n",
      "Epoch 5/100\n",
      "77/78 [============================>.] - ETA: 0s - loss: 1.3878 - accuracy: 0.2649\n",
      "Epoch 5: val_loss did not improve from 1.38280\n",
      "78/78 [==============================] - 3s 36ms/step - loss: 1.3869 - accuracy: 0.2651 - val_loss: 1.3830 - val_accuracy: 0.2786\n",
      "Epoch 6/100\n",
      "76/78 [============================>.] - ETA: 0s - loss: 1.3808 - accuracy: 0.2829\n",
      "Epoch 6: val_loss improved from 1.38280 to 1.38062, saving model to c:\\Users\\james\\OneDrive\\GradSchool\\Spring 2022\\tunedMode.h5\n",
      "78/78 [==============================] - 3s 38ms/step - loss: 1.3823 - accuracy: 0.2780 - val_loss: 1.3806 - val_accuracy: 0.2930\n",
      "Epoch 7/100\n",
      "78/78 [==============================] - ETA: 0s - loss: 1.3724 - accuracy: 0.2844\n",
      "Epoch 7: val_loss improved from 1.38062 to 1.38055, saving model to c:\\Users\\james\\OneDrive\\GradSchool\\Spring 2022\\tunedMode.h5\n",
      "78/78 [==============================] - 3s 37ms/step - loss: 1.3724 - accuracy: 0.2844 - val_loss: 1.3806 - val_accuracy: 0.2930\n",
      "Epoch 8/100\n",
      "76/78 [============================>.] - ETA: 0s - loss: 1.3554 - accuracy: 0.3329\n",
      "Epoch 8: val_loss improved from 1.38055 to 1.37891, saving model to c:\\Users\\james\\OneDrive\\GradSchool\\Spring 2022\\tunedMode.h5\n",
      "78/78 [==============================] - 3s 36ms/step - loss: 1.3564 - accuracy: 0.3308 - val_loss: 1.3789 - val_accuracy: 0.2852\n",
      "Epoch 9/100\n",
      "78/78 [==============================] - ETA: 0s - loss: 1.3635 - accuracy: 0.3050\n",
      "Epoch 9: val_loss improved from 1.37891 to 1.37888, saving model to c:\\Users\\james\\OneDrive\\GradSchool\\Spring 2022\\tunedMode.h5\n",
      "78/78 [==============================] - 3s 37ms/step - loss: 1.3635 - accuracy: 0.3050 - val_loss: 1.3789 - val_accuracy: 0.2819\n",
      "Epoch 10/100\n",
      "78/78 [==============================] - ETA: 0s - loss: 1.3441 - accuracy: 0.3282\n",
      "Epoch 10: val_loss improved from 1.37888 to 1.37773, saving model to c:\\Users\\james\\OneDrive\\GradSchool\\Spring 2022\\tunedMode.h5\n",
      "78/78 [==============================] - 3s 38ms/step - loss: 1.3441 - accuracy: 0.3282 - val_loss: 1.3777 - val_accuracy: 0.2985\n",
      "Epoch 11/100\n",
      "77/78 [============================>.] - ETA: 0s - loss: 1.3513 - accuracy: 0.3325\n",
      "Epoch 11: val_loss did not improve from 1.37773\n",
      "78/78 [==============================] - 3s 38ms/step - loss: 1.3504 - accuracy: 0.3346 - val_loss: 1.3782 - val_accuracy: 0.2819\n",
      "Epoch 12/100\n",
      "78/78 [==============================] - ETA: 0s - loss: 1.3483 - accuracy: 0.3037\n",
      "Epoch 12: val_loss improved from 1.37773 to 1.37644, saving model to c:\\Users\\james\\OneDrive\\GradSchool\\Spring 2022\\tunedMode.h5\n",
      "78/78 [==============================] - 3s 36ms/step - loss: 1.3483 - accuracy: 0.3037 - val_loss: 1.3764 - val_accuracy: 0.2830\n",
      "Epoch 13/100\n",
      "78/78 [==============================] - ETA: 0s - loss: 1.3275 - accuracy: 0.3629\n",
      "Epoch 13: val_loss improved from 1.37644 to 1.37456, saving model to c:\\Users\\james\\OneDrive\\GradSchool\\Spring 2022\\tunedMode.h5\n",
      "78/78 [==============================] - 3s 39ms/step - loss: 1.3275 - accuracy: 0.3629 - val_loss: 1.3746 - val_accuracy: 0.2874\n",
      "Epoch 14/100\n",
      "78/78 [==============================] - ETA: 0s - loss: 1.3306 - accuracy: 0.3475\n",
      "Epoch 14: val_loss improved from 1.37456 to 1.37436, saving model to c:\\Users\\james\\OneDrive\\GradSchool\\Spring 2022\\tunedMode.h5\n",
      "78/78 [==============================] - 3s 39ms/step - loss: 1.3306 - accuracy: 0.3475 - val_loss: 1.3744 - val_accuracy: 0.3018\n",
      "Epoch 15/100\n",
      "77/78 [============================>.] - ETA: 0s - loss: 1.2883 - accuracy: 0.3987\n",
      "Epoch 15: val_loss improved from 1.37436 to 1.37297, saving model to c:\\Users\\james\\OneDrive\\GradSchool\\Spring 2022\\tunedMode.h5\n",
      "78/78 [==============================] - 3s 38ms/step - loss: 1.2886 - accuracy: 0.3990 - val_loss: 1.3730 - val_accuracy: 0.2786\n",
      "Epoch 16/100\n",
      "78/78 [==============================] - ETA: 0s - loss: 1.2779 - accuracy: 0.4106\n",
      "Epoch 16: val_loss did not improve from 1.37297\n",
      "78/78 [==============================] - 3s 37ms/step - loss: 1.2779 - accuracy: 0.4106 - val_loss: 1.3776 - val_accuracy: 0.2919\n",
      "Epoch 17/100\n",
      "77/78 [============================>.] - ETA: 0s - loss: 1.2728 - accuracy: 0.4169\n",
      "Epoch 17: val_loss did not improve from 1.37297\n",
      "78/78 [==============================] - 3s 38ms/step - loss: 1.2719 - accuracy: 0.4196 - val_loss: 1.3787 - val_accuracy: 0.2863\n",
      "Epoch 18/100\n",
      "78/78 [==============================] - ETA: 0s - loss: 1.2644 - accuracy: 0.4440\n",
      "Epoch 18: val_loss did not improve from 1.37297\n",
      "78/78 [==============================] - 3s 36ms/step - loss: 1.2644 - accuracy: 0.4440 - val_loss: 1.3781 - val_accuracy: 0.2896\n",
      "Epoch 19/100\n",
      "78/78 [==============================] - ETA: 0s - loss: 1.2564 - accuracy: 0.4440\n",
      "Epoch 19: val_loss did not improve from 1.37297\n",
      "78/78 [==============================] - 3s 38ms/step - loss: 1.2564 - accuracy: 0.4440 - val_loss: 1.3815 - val_accuracy: 0.2863\n"
     ]
    }
   ],
   "source": [
    "learning_rate = 1e-4\n",
    "\n",
    "loss = tf.keras.losses.categorical_crossentropy\n",
    "optimizer = tf.keras.optimizers.Adam(learning_rate=learning_rate)\n",
    "modelPath = os.path.join(os.getcwd(), 'tunedMode.h5')\n",
    "print('Saving to: ' + modelPath)\n",
    "\n",
    "trainedModel_newLayers.compile(loss=loss, optimizer=optimizer, metrics=['accuracy'])\n",
    "\n",
    "checkpoint = ModelCheckpoint( # set model saving checkpoints\n",
    "    modelPath, # set path to save model weights\n",
    "    monitor='val_loss', # set monitor metrics\n",
    "    verbose=1, # set training verbosity\n",
    "    save_best_only=True, # set if want to save only best weights\n",
    "    save_weights_only=True, # set if you want to save only model weights\n",
    "    mode='auto', # set if save min or max in metrics\n",
    "    save_freq=\"epoch\"  # interval between checkpoints\n",
    "    )\n",
    "\n",
    "earlystopping = EarlyStopping(\n",
    "    monitor='val_loss', # set monitor metrics\n",
    "    min_delta=0.00001, # set minimum metrics delta\n",
    "    patience=4, # number of epochs to stop training\n",
    "    restore_best_weights=True, # set if use best weights or last weights\n",
    "    )\n",
    "callbacksList = [checkpoint, earlystopping] # build callbacks list\n",
    "\n",
    "hist = trainedModel_newLayers.fit(x_train_reshaped, y_train_OH_smote, epochs=100, batch_size=10,\n",
    "                validation_data=(x_test_reshaped, y_test_OH), callbacks=callbacksList) #32"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 294,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x1895a2c5be0>"
      ]
     },
     "execution_count": 294,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig,ax=plt.subplots()\n",
    "ax.plot(hist.history['accuracy'], color = 'b')\n",
    "ax.plot(hist.history['val_accuracy'], linestyle=':', color = 'b')\n",
    "ax.set_ylabel(\"Accuracy\", color = 'b')\n",
    "ax.set_ylim([0,1])\n",
    "ax2=ax.twinx()\n",
    "ax2.plot(hist.history['loss'],  color = 'r')\n",
    "ax2.plot(hist.history['val_loss'], linestyle=':',  color = 'r')\n",
    "ax2.set_ylabel(\"Loss (cross-entropy)\",  color = 'r')\n",
    "fig.legend(['accuracy','val_accuracy','loss','val_loss'])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Evaluate final model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 301,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "29/29 [==============================] - 1s 28ms/step - loss: 1.3674 - accuracy: 0.3120\n",
      "\n",
      "Accuracy: 0.31201764941215515\n",
      "\n",
      "Loss:  1.3674137592315674\n",
      "\n",
      " Cohen kappa \n",
      "\n",
      " 0.08269353262375823\n",
      "\n",
      " Classification report \n",
      "\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "       Right       0.29      0.39      0.33       227\n",
      "        Left       0.31      0.31      0.31       226\n",
      "        Rest       0.28      0.18      0.22       227\n",
      "      tongue       0.37      0.37      0.37       227\n",
      "\n",
      "    accuracy                           0.31       907\n",
      "   macro avg       0.31      0.31      0.31       907\n",
      "weighted avg       0.31      0.31      0.31       907\n",
      "\n",
      "\n",
      " Confusion matrix \n",
      "\n",
      " [[88 61 38 40]\n",
      " [71 70 35 50]\n",
      " [89 43 40 55]\n",
      " [59 55 28 85]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 301,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "testLoss, testAcc = trainedModel_newLayers.evaluate(x_valid_reshaped, y_valid_OH)\n",
    "print('\\nAccuracy:', testAcc)\n",
    "print('\\nLoss: ', testLoss)\n",
    "\n",
    "from sklearn.metrics import classification_report, confusion_matrix, cohen_kappa_score\n",
    "yPred = trainedModel_newLayers.predict(x_valid_reshaped)\n",
    "\n",
    "# convert from one hot encode in string\n",
    "yTestClass = np.argmax(y_valid_OH, axis=1)\n",
    "yPredClass = np.argmax(yPred,axis=1)\n",
    "\n",
    "print('\\n Cohen kappa \\n\\n',\n",
    "  cohen_kappa_score(\n",
    "      yTestClass,\n",
    "      yPredClass\n",
    "      )\n",
    "  )\n",
    "\n",
    "print('\\n Classification report \\n\\n',\n",
    "  classification_report(\n",
    "      yTestClass,\n",
    "      yPredClass,\n",
    "       target_names=[\"Right\", \"Left\", \"Rest\", \"tongue\"]\n",
    "      )\n",
    "  )\n",
    "\n",
    "print('\\n Confusion matrix \\n\\n',\n",
    "  confusion_matrix(\n",
    "      yTestClass,\n",
    "      yPredClass,\n",
    "      )\n",
    "  )\n",
    "\n",
    "import seaborn as sns\n",
    "sns.heatmap(confusion_matrix(\n",
    "      yTestClass,\n",
    "      yPredClass,\n",
    "      ))"
   ]
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "97feb688b70790b3a36568db4150e7c0b6184ca81aa48ab1cffefce025dbdfee"
  },
  "kernelspec": {
   "display_name": "Python 3.9.12 64-bit (windows store)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
